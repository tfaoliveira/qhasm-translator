fn crypto_scalarmult_curve25519_amd64_64_work_cswap(reg u64 workp, reg u64 swap){
	 reg bool eqf;
	 reg u64 t;
	 reg u64 w0;
	 reg u64 w1;
	 reg u64 w10;
	 reg u64 w11;
	 reg u64 w12;
	 reg u64 w13;
	 reg u64 w14;
	 reg u64 w15;
	 reg u64 w2;
	 reg u64 w3;
	 reg u64 w4;
	 reg u64 w5;
	 reg u64 w6;
	 reg u64 w7;
	 reg u64 w8;
	 reg u64 w9;

	eqf = (swap == 1);
	w0 = workp[0];
	w8 = workp[8];
	t = w0;
	w0 = w8 if eqf;
	w8 = t if eqf;
	workp[0] = w0;
	workp[8] = w8;
	w1 = workp[1];
	w9 = workp[9];
	t = w1;
	w1 = w9 if eqf;
	w9 = t if eqf;
	workp[1] = w1;
	workp[9] = w9;
	w2 = workp[2];
	w10 = workp[10];
	t = w2;
	w2 = w10 if eqf;
	w10 = t if eqf;
	workp[2] = w2;
	workp[10] = w10;
	w3 = workp[3];
	w11 = workp[11];
	t = w3;
	w3 = w11 if eqf;
	w11 = t if eqf;
	workp[3] = w3;
	workp[11] = w11;
	w4 = workp[4];
	w12 = workp[12];
	t = w4;
	w4 = w12 if eqf;
	w12 = t if eqf;
	workp[4] = w4;
	workp[12] = w12;
	w5 = workp[5];
	w13 = workp[13];
	t = w5;
	w5 = w13 if eqf;
	w13 = t if eqf;
	workp[5] = w5;
	workp[13] = w13;
	w6 = workp[6];
	w14 = workp[14];
	t = w6;
	w6 = w14 if eqf;
	w14 = t if eqf;
	workp[6] = w6;
	workp[14] = w14;
	w7 = workp[7];
	w15 = workp[15];
	t = w7;
	w7 = w15 if eqf;
	w15 = t if eqf;
	workp[7] = w7;
	workp[15] = w15;
	return;
}


