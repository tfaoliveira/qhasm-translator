

fn crypto_scalarmult_curve25519_amd64_64_work_cswap(reg u64[16] workp, reg u64 swap){

	 reg u64 t;
	 reg u64 w0;
	 reg u64 w1;
	 reg u64 w10;
	 reg u64 w11;
	 reg u64 w12;
	 reg u64 w13;
	 reg u64 w14;
	 reg u64 w15;
	 reg u64 w2;
	 reg u64 w3;
	 reg u64 w4;
	 reg u64 w5;
	 reg u64 w6;
	 reg u64 w7;
	 reg u64 w8;
	 reg u64 w9;

	//=? swap - 1
	w0 = workp[0];  //w0 = *(uint64 *) (workp + 0)
	w8 = workp[8];  //w8 = *(uint64 *) (workp + 64)
	t = w0;  //t = w0
	w0 = w8 if (swap == 1);  //w0 = w8 if =
	w8 = t if (swap == 1);  //w8 = t if =
	workp[0] = w0;  //*(uint64 *) (workp + 0) = w0
	workp[8] = w8;  //*(uint64 *) (workp + 64) = w8
	w1 = workp[1];  //w1 = *(uint64 *) (workp + 8)
	w9 = workp[9];  //w9 = *(uint64 *) (workp + 72)
	t = w1;  //t = w1
	w1 = w9 if (swap == 1);  //w1 = w9 if =
	w9 = t if (swap == 1);  //w9 = t if =
	workp[1] = w1;  //*(uint64 *) (workp + 8) = w1
	workp[9] = w9;  //*(uint64 *) (workp + 72) = w9
	w2 = workp[2];  //w2 = *(uint64 *) (workp + 16)
	w10 = workp[10];  //w10 = *(uint64 *) (workp + 80)
	t = w2;  //t = w2
	w2 = w10 if (swap == 1);  //w2 = w10 if =
	w10 = t if (swap == 1);  //w10 = t if =
	workp[2] = w2;  //*(uint64 *) (workp + 16) = w2
	workp[10] = w10;  //*(uint64 *) (workp + 80) = w10
	w3 = workp[3];  //w3 = *(uint64 *) (workp + 24)
	w11 = workp[11];  //w11 = *(uint64 *) (workp + 88)
	t = w3;  //t = w3
	w3 = w11 if (swap == 1);  //w3 = w11 if =
	w11 = t if (swap == 1);  //w11 = t if =
	workp[3] = w3;  //*(uint64 *) (workp + 24) = w3
	workp[11] = w11;  //*(uint64 *) (workp + 88) = w11
	w4 = workp[4];  //w4 = *(uint64 *) (workp + 32)
	w12 = workp[12];  //w12 = *(uint64 *) (workp + 96)
	t = w4;  //t = w4
	w4 = w12 if (swap == 1);  //w4 = w12 if =
	w12 = t if (swap == 1);  //w12 = t if =
	workp[4] = w4;  //*(uint64 *) (workp + 32) = w4
	workp[12] = w12;  //*(uint64 *) (workp + 96) = w12
	w5 = workp[5];  //w5 = *(uint64 *) (workp + 40)
	w13 = workp[13];  //w13 = *(uint64 *) (workp + 104)
	t = w5;  //t = w5
	w5 = w13 if (swap == 1);  //w5 = w13 if =
	w13 = t if (swap == 1);  //w13 = t if =
	workp[5] = w5;  //*(uint64 *) (workp + 40) = w5
	workp[13] = w13;  //*(uint64 *) (workp + 104) = w13
	w6 = workp[6];  //w6 = *(uint64 *) (workp + 48)
	w14 = workp[14];  //w14 = *(uint64 *) (workp + 112)
	t = w6;  //t = w6
	w6 = w14 if (swap == 1);  //w6 = w14 if =
	w14 = t if (swap == 1);  //w14 = t if =
	workp[6] = w6;  //*(uint64 *) (workp + 48) = w6
	workp[14] = w14;  //*(uint64 *) (workp + 112) = w14
	w7 = workp[7];  //w7 = *(uint64 *) (workp + 56)
	w15 = workp[15];  //w15 = *(uint64 *) (workp + 120)
	t = w7;  //t = w7
	w7 = w15 if (swap == 1);  //w7 = w15 if =
	w15 = t if (swap == 1);  //w15 = t if =
	workp[7] = w7;  //*(uint64 *) (workp + 56) = w7
	workp[15] = w15;  //*(uint64 *) (workp + 120) = w15
	return;
}


