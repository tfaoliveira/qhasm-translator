export fn crypto_scalarmult_curve25519_amd64_51_work_cswap(reg u64 workp, reg u64 swap){
	 reg u64 t0;
	 reg u64 t1;
	 reg u64 t2;
	 reg u64 t3;
	 reg u64 t4;
	 reg u64 t5;
	 reg u64 t6;
	 reg u64 t7;
	 reg u64 t8;
	 reg u64 t9;
	 reg u64 w0;
	 reg u64 w1;
	 reg u64 w10;
	 reg u64 w11;
	 reg u64 w12;
	 reg u64 w13;
	 reg u64 w14;
	 reg u64 w15;
	 reg u64 w16;
	 reg u64 w17;
	 reg u64 w18;
	 reg u64 w19;
	 reg u64 w2;
	 reg u64 w3;
	 reg u64 w4;
	 reg u64 w5;
	 reg u64 w6;
	 reg u64 w7;
	 reg u64 w8;
	 reg u64 w9;

	//=? swap - 1
	w0 = [workp + 0*8];  //w0 = *(uint64 *) (workp + 0)
	w10 = [workp + 10*8];  //w10 = *(uint64 *) (workp + 80)
	w1 = [workp + 1*8];  //w1 = *(uint64 *) (workp + 8)
	w11 = [workp + 11*8];  //w11 = *(uint64 *) (workp + 88)
	t0 = w0;  //t0 = w0
	w0 = w10 if (swap == 1);  //w0 = w10 if =
	w10 = t0 if (swap == 1);  //w10 = t0 if =
	t1 = w1;  //t1 = w1
	w1 = w11 if (swap == 1);  //w1 = w11 if =
	w11 = t1 if (swap == 1);  //w11 = t1 if =
	[workp + 0*8] = w0;  //*(uint64 *) (workp + 0) = w0
	[workp + 10*8] = w10;  //*(uint64 *) (workp + 80) = w10
	[workp + 1*8] = w1;  //*(uint64 *) (workp + 8) = w1
	[workp + 11*8] = w11;  //*(uint64 *) (workp + 88) = w11
	w2 = [workp + 2*8];  //w2 = *(uint64 *) (workp + 16)
	w12 = [workp + 12*8];  //w12 = *(uint64 *) (workp + 96)
	w3 = [workp + 3*8];  //w3 = *(uint64 *) (workp + 24)
	w13 = [workp + 13*8];  //w13 = *(uint64 *) (workp + 104)
	t2 = w2;  //t2 = w2
	w2 = w12 if (swap == 1);  //w2 = w12 if =
	w12 = t2 if (swap == 1);  //w12 = t2 if =
	t3 = w3;  //t3 = w3
	w3 = w13 if (swap == 1);  //w3 = w13 if =
	w13 = t3 if (swap == 1);  //w13 = t3 if =
	[workp + 2*8] = w2;  //*(uint64 *) (workp + 16) = w2
	[workp + 12*8] = w12;  //*(uint64 *) (workp + 96) = w12
	[workp + 3*8] = w3;  //*(uint64 *) (workp + 24) = w3
	[workp + 13*8] = w13;  //*(uint64 *) (workp + 104) = w13
	w4 = [workp + 4*8];  //w4 = *(uint64 *) (workp + 32)
	w14 = [workp + 14*8];  //w14 = *(uint64 *) (workp + 112)
	w5 = [workp + 5*8];  //w5 = *(uint64 *) (workp + 40)
	w15 = [workp + 15*8];  //w15 = *(uint64 *) (workp + 120)
	t4 = w4;  //t4 = w4
	w4 = w14 if (swap == 1);  //w4 = w14 if =
	w14 = t4 if (swap == 1);  //w14 = t4 if =
	t5 = w5;  //t5 = w5
	w5 = w15 if (swap == 1);  //w5 = w15 if =
	w15 = t5 if (swap == 1);  //w15 = t5 if =
	[workp + 4*8] = w4;  //*(uint64 *) (workp + 32) = w4
	[workp + 14*8] = w14;  //*(uint64 *) (workp + 112) = w14
	[workp + 5*8] = w5;  //*(uint64 *) (workp + 40) = w5
	[workp + 15*8] = w15;  //*(uint64 *) (workp + 120) = w15
	w6 = [workp + 6*8];  //w6 = *(uint64 *) (workp + 48)
	w16 = [workp + 16*8];  //w16 = *(uint64 *) (workp + 128)
	w7 = [workp + 7*8];  //w7 = *(uint64 *) (workp + 56)
	w17 = [workp + 17*8];  //w17 = *(uint64 *) (workp + 136)
	t6 = w6;  //t6 = w6
	w6 = w16 if (swap == 1);  //w6 = w16 if =
	w16 = t6 if (swap == 1);  //w16 = t6 if =
	t7 = w7;  //t7 = w7
	w7 = w17 if (swap == 1);  //w7 = w17 if =
	w17 = t7 if (swap == 1);  //w17 = t7 if =
	[workp + 6*8] = w6;  //*(uint64 *) (workp + 48) = w6
	[workp + 16*8] = w16;  //*(uint64 *) (workp + 128) = w16
	[workp + 7*8] = w7;  //*(uint64 *) (workp + 56) = w7
	[workp + 17*8] = w17;  //*(uint64 *) (workp + 136) = w17
	w8 = [workp + 8*8];  //w8 = *(uint64 *) (workp + 64)
	w18 = [workp + 18*8];  //w18 = *(uint64 *) (workp + 144)
	w9 = [workp + 9*8];  //w9 = *(uint64 *) (workp + 72)
	w19 = [workp + 19*8];  //w19 = *(uint64 *) (workp + 152)
	t8 = w8;  //t8 = w8
	w8 = w18 if (swap == 1);  //w8 = w18 if =
	w18 = t8 if (swap == 1);  //w18 = t8 if =
	t9 = w9;  //t9 = w9
	w9 = w19 if (swap == 1);  //w9 = w19 if =
	w19 = t9 if (swap == 1);  //w19 = t9 if =
	[workp + 8*8] = w8;  //*(uint64 *) (workp + 64) = w8
	[workp + 18*8] = w18;  //*(uint64 *) (workp + 144) = w18
	[workp + 9*8] = w9;  //*(uint64 *) (workp + 72) = w9
	[workp + 19*8] = w19;  //*(uint64 *) (workp + 152) = w19
	return;
}


