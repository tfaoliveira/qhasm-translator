export fn crypto_scalarmult_curve25519_amd64_51_work_cswap(reg u64 workp, reg u64 swap){
	 reg bool eqf;
	 reg u64 t0;
	 reg u64 t1;
	 reg u64 t2;
	 reg u64 t3;
	 reg u64 t4;
	 reg u64 t5;
	 reg u64 t6;
	 reg u64 t7;
	 reg u64 t8;
	 reg u64 t9;
	 reg u64 w0;
	 reg u64 w1;
	 reg u64 w10;
	 reg u64 w11;
	 reg u64 w12;
	 reg u64 w13;
	 reg u64 w14;
	 reg u64 w15;
	 reg u64 w16;
	 reg u64 w17;
	 reg u64 w18;
	 reg u64 w19;
	 reg u64 w2;
	 reg u64 w3;
	 reg u64 w4;
	 reg u64 w5;
	 reg u64 w6;
	 reg u64 w7;
	 reg u64 w8;
	 reg u64 w9;

	eqf = (swap == 1);
	w0 = [workp + 0*8];
	w10 = [workp + 10*8];
	w1 = [workp + 1*8];
	w11 = [workp + 11*8];
	t0 = w0;
	w0 = w10 if eqf;
	w10 = t0 if eqf;
	t1 = w1;
	w1 = w11 if eqf;
	w11 = t1 if eqf;
	[workp + 0*8] = w0;
	[workp + 10*8] = w10;
	[workp + 1*8] = w1;
	[workp + 11*8] = w11;
	w2 = [workp + 2*8];
	w12 = [workp + 12*8];
	w3 = [workp + 3*8];
	w13 = [workp + 13*8];
	t2 = w2;
	w2 = w12 if eqf;
	w12 = t2 if eqf;
	t3 = w3;
	w3 = w13 if eqf;
	w13 = t3 if eqf;
	[workp + 2*8] = w2;
	[workp + 12*8] = w12;
	[workp + 3*8] = w3;
	[workp + 13*8] = w13;
	w4 = [workp + 4*8];
	w14 = [workp + 14*8];
	w5 = [workp + 5*8];
	w15 = [workp + 15*8];
	t4 = w4;
	w4 = w14 if eqf;
	w14 = t4 if eqf;
	t5 = w5;
	w5 = w15 if eqf;
	w15 = t5 if eqf;
	[workp + 4*8] = w4;
	[workp + 14*8] = w14;
	[workp + 5*8] = w5;
	[workp + 15*8] = w15;
	w6 = [workp + 6*8];
	w16 = [workp + 16*8];
	w7 = [workp + 7*8];
	w17 = [workp + 17*8];
	t6 = w6;
	w6 = w16 if eqf;
	w16 = t6 if eqf;
	t7 = w7;
	w7 = w17 if eqf;
	w17 = t7 if eqf;
	[workp + 6*8] = w6;
	[workp + 16*8] = w16;
	[workp + 7*8] = w7;
	[workp + 17*8] = w17;
	w8 = [workp + 8*8];
	w18 = [workp + 18*8];
	w9 = [workp + 9*8];
	w19 = [workp + 19*8];
	t8 = w8;
	w8 = w18 if eqf;
	w18 = t8 if eqf;
	t9 = w9;
	w9 = w19 if eqf;
	w19 = t9 if eqf;
	[workp + 8*8] = w8;
	[workp + 18*8] = w18;
	[workp + 9*8] = w9;
	[workp + 19*8] = w19;
	return;
}


