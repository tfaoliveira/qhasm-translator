param u64 crypto_scalarmult_curve25519_amd64_51_REDMASK51 = 0x0007FFFFFFFFFFFF;
fn crypto_scalarmult_curve25519_amd64_51_fe25519_mul(reg u64 rp, reg u64 xp, reg u64 yp){
	 reg bool cf;
	 reg u64 mulr01;
	 reg u64 mulr11;
	 reg u64 mulr21;
	 reg u64 mulr31;
	 reg u64 mulr41;
	 reg u64 mulrax;
	 reg u64 mulrdx;
	 reg u64 mulredmask;
	 reg u64 mult;
	 stack u64 mulx319_stack;
	 stack u64 mulx419_stack;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
	 reg u64 r4;
	 stack u64[] rp_stack;

	rp_stack = rp;  //rp_stack = rp
	yp = yp;  //yp = yp
	mulrax = [xp + 3*8];  //mulrax = *(uint64 *) (xp + 24)
	mulrax *= 19;  //mulrax *= 19
	mulx319_stack = mulrax;  //mulx319_stack = mulrax
	mulrdx, mulrax = mulrax * [yp + 2*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 16);
	r0 = mulrax;  //r0 = mulrax
	mulr01 = mulrdx;  //mulr01 = mulrdx
	mulrax = [xp + 4*8];  //mulrax = *(uint64 *) (xp + 32)
	mulrax *= 19;  //mulrax *= 19
	mulx419_stack = mulrax;  //mulx419_stack = mulrax
	mulrdx, mulrax = mulrax * [yp + 1*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 8);
	cf, r0 += mulrax;  //cf? r0 += mulrax
	_, mulr01 += mulrdx + cf;  //mulr01 += mulrdx + cf; 
	mulrax = [xp + 0*8];  //mulrax = *(uint64 *) (xp + 0)
	mulrdx, mulrax = mulrax * [yp + 0*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 0);
	cf, r0 += mulrax;  //cf? r0 += mulrax
	_, mulr01 += mulrdx + cf;  //mulr01 += mulrdx + cf; 
	mulrax = [xp + 0*8];  //mulrax = *(uint64 *) (xp + 0)
	mulrdx, mulrax = mulrax * [yp + 1*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 8);
	r1 = mulrax;  //r1 = mulrax
	mulr11 = mulrdx;  //mulr11 = mulrdx
	mulrax = [xp + 0*8];  //mulrax = *(uint64 *) (xp + 0)
	mulrdx, mulrax = mulrax * [yp + 2*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 16);
	r2 = mulrax;  //r2 = mulrax
	mulr21 = mulrdx;  //mulr21 = mulrdx
	mulrax = [xp + 0*8];  //mulrax = *(uint64 *) (xp + 0)
	mulrdx, mulrax = mulrax * [yp + 3*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 24);
	r3 = mulrax;  //r3 = mulrax
	mulr31 = mulrdx;  //mulr31 = mulrdx
	mulrax = [xp + 0*8];  //mulrax = *(uint64 *) (xp + 0)
	mulrdx, mulrax = mulrax * [yp + 4*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 32);
	r4 = mulrax;  //r4 = mulrax
	mulr41 = mulrdx;  //mulr41 = mulrdx
	mulrax = [xp + 1*8];  //mulrax = *(uint64 *) (xp + 8)
	mulrdx, mulrax = mulrax * [yp + 0*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 0);
	cf, r1 += mulrax;  //cf? r1 += mulrax
	_, mulr11 += mulrdx + cf;  //mulr11 += mulrdx + cf; 
	mulrax = [xp + 1*8];  //mulrax = *(uint64 *) (xp + 8)
	mulrdx, mulrax = mulrax * [yp + 1*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 8);
	cf, r2 += mulrax;  //cf? r2 += mulrax
	_, mulr21 += mulrdx + cf;  //mulr21 += mulrdx + cf; 
	mulrax = [xp + 1*8];  //mulrax = *(uint64 *) (xp + 8)
	mulrdx, mulrax = mulrax * [yp + 2*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 16);
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulr31 += mulrdx + cf;  //mulr31 += mulrdx + cf; 
	mulrax = [xp + 1*8];  //mulrax = *(uint64 *) (xp + 8)
	mulrdx, mulrax = mulrax * [yp + 3*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 24);
	cf, r4 += mulrax;  //cf? r4 += mulrax
	_, mulr41 += mulrdx + cf;  //mulr41 += mulrdx + cf; 
	mulrax = [xp + 1*8];  //mulrax = *(uint64 *) (xp + 8)
	mulrax *= 19;  //mulrax *= 19
	mulrdx, mulrax = mulrax * [yp + 4*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 32);
	cf, r0 += mulrax;  //cf? r0 += mulrax
	_, mulr01 += mulrdx + cf;  //mulr01 += mulrdx + cf; 
	mulrax = [xp + 2*8];  //mulrax = *(uint64 *) (xp + 16)
	mulrdx, mulrax = mulrax * [yp + 0*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 0);
	cf, r2 += mulrax;  //cf? r2 += mulrax
	_, mulr21 += mulrdx + cf;  //mulr21 += mulrdx + cf; 
	mulrax = [xp + 2*8];  //mulrax = *(uint64 *) (xp + 16)
	mulrdx, mulrax = mulrax * [yp + 1*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 8);
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulr31 += mulrdx + cf;  //mulr31 += mulrdx + cf; 
	mulrax = [xp + 2*8];  //mulrax = *(uint64 *) (xp + 16)
	mulrdx, mulrax = mulrax * [yp + 2*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 16);
	cf, r4 += mulrax;  //cf? r4 += mulrax
	_, mulr41 += mulrdx + cf;  //mulr41 += mulrdx + cf; 
	mulrax = [xp + 2*8];  //mulrax = *(uint64 *) (xp + 16)
	mulrax *= 19;  //mulrax *= 19
	mulrdx, mulrax = mulrax * [yp + 3*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 24);
	cf, r0 += mulrax;  //cf? r0 += mulrax
	_, mulr01 += mulrdx + cf;  //mulr01 += mulrdx + cf; 
	mulrax = [xp + 2*8];  //mulrax = *(uint64 *) (xp + 16)
	mulrax *= 19;  //mulrax *= 19
	mulrdx, mulrax = mulrax * [yp + 4*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 32);
	cf, r1 += mulrax;  //cf? r1 += mulrax
	_, mulr11 += mulrdx + cf;  //mulr11 += mulrdx + cf; 
	mulrax = [xp + 3*8];  //mulrax = *(uint64 *) (xp + 24)
	mulrdx, mulrax = mulrax * [yp + 0*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 0);
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulr31 += mulrdx + cf;  //mulr31 += mulrdx + cf; 
	mulrax = [xp + 3*8];  //mulrax = *(uint64 *) (xp + 24)
	mulrdx, mulrax = mulrax * [yp + 1*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 8);
	cf, r4 += mulrax;  //cf? r4 += mulrax
	_, mulr41 += mulrdx + cf;  //mulr41 += mulrdx + cf; 
	mulrax = mulx319_stack;  //mulrax = mulx319_stack
	mulrdx, mulrax = mulrax * [yp + 3*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 24);
	cf, r1 += mulrax;  //cf? r1 += mulrax
	_, mulr11 += mulrdx + cf;  //mulr11 += mulrdx + cf; 
	mulrax = mulx319_stack;  //mulrax = mulx319_stack
	mulrdx, mulrax = mulrax * [yp + 4*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 32);
	cf, r2 += mulrax;  //cf? r2 += mulrax
	_, mulr21 += mulrdx + cf;  //mulr21 += mulrdx + cf; 
	mulrax = [xp + 4*8];  //mulrax = *(uint64 *) (xp + 32)
	mulrdx, mulrax = mulrax * [yp + 0*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 0);
	cf, r4 += mulrax;  //cf? r4 += mulrax
	_, mulr41 += mulrdx + cf;  //mulr41 += mulrdx + cf; 
	mulrax = mulx419_stack;  //mulrax = mulx419_stack
	mulrdx, mulrax = mulrax * [yp + 2*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 16);
	cf, r1 += mulrax;  //cf? r1 += mulrax
	_, mulr11 += mulrdx + cf;  //mulr11 += mulrdx + cf; 
	mulrax = mulx419_stack;  //mulrax = mulx419_stack
	mulrdx, mulrax = mulrax * [yp + 3*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 24);
	cf, r2 += mulrax;  //cf? r2 += mulrax
	_, mulr21 += mulrdx + cf;  //mulr21 += mulrdx + cf; 
	mulrax = mulx419_stack;  //mulrax = mulx419_stack
	mulrdx, mulrax = mulrax * [yp + 4*8];  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) (yp + 32);
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulr31 += mulrdx + cf;  //mulr31 += mulrdx + cf; 
	mulredmask = crypto_scalarmult_curve25519_amd64_51_REDMASK51;  //mulredmask = *(uint64 *) &crypto_scalarmult_curve25519_amd64_51_REDMASK51
	mulr01, _ = (mulr01, r0) << 13;  //mulr01 = (mulr01.r0) << 13
	r0 &= mulredmask;  //r0 &= mulredmask
	mulr11, _ = (mulr11, r1) << 13;  //mulr11 = (mulr11.r1) << 13
	r1 &= mulredmask;  //r1 &= mulredmask
	r1 += mulr01;  //r1 += mulr01
	mulr21, _ = (mulr21, r2) << 13;  //mulr21 = (mulr21.r2) << 13
	r2 &= mulredmask;  //r2 &= mulredmask
	r2 += mulr11;  //r2 += mulr11
	mulr31, _ = (mulr31, r3) << 13;  //mulr31 = (mulr31.r3) << 13
	r3 &= mulredmask;  //r3 &= mulredmask
	r3 += mulr21;  //r3 += mulr21
	mulr41, _ = (mulr41, r4) << 13;  //mulr41 = (mulr41.r4) << 13
	r4 &= mulredmask;  //r4 &= mulredmask
	r4 += mulr31;  //r4 += mulr31
	mulr41 = mulr41 * 19;  //mulr41 = mulr41 * 19
	r0 += mulr41;  //r0 += mulr41
	mult = r0;  //mult = r0
	mult >>= 51;  //(uint64) mult >>= 51
	mult += r1;  //mult += r1
	r1 = mult;  //r1 = mult
	mult >>= 51;  //(uint64) mult >>= 51
	r0 &= mulredmask;  //r0 &= mulredmask
	mult += r2;  //mult += r2
	r2 = mult;  //r2 = mult
	mult >>= 51;  //(uint64) mult >>= 51
	r1 &= mulredmask;  //r1 &= mulredmask
	mult += r3;  //mult += r3
	r3 = mult;  //r3 = mult
	mult >>= 51;  //(uint64) mult >>= 51
	r2 &= mulredmask;  //r2 &= mulredmask
	mult += r4;  //mult += r4
	r4 = mult;  //r4 = mult
	mult >>= 51;  //(uint64) mult >>= 51
	r3 &= mulredmask;  //r3 &= mulredmask
	mult *= 19;  //mult *= 19
	r0 += mult;  //r0 += mult
	r4 &= mulredmask;  //r4 &= mulredmask
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	[rp + 4*8] = r4;  //*(uint64 *) (rp + 32) = r4
	return;
}


