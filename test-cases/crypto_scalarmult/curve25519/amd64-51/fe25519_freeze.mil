param int crypto_scalarmult_curve25519_amd64_51_REDMASK51 = 0x0007FFFFFFFFFFFF;
export fn crypto_scalarmult_curve25519_amd64_51_fe25519_freeze(reg u64 rp){
	 reg bool eqf;
	 reg u64 loop;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
	 reg u64 r4;
	 reg u64 t;
	 reg u64 two51minus1;
	 reg u64 two51minus19;

	r0 = [rp + 0*8];
	r1 = [rp + 1*8];
	r2 = [rp + 2*8];
	r3 = [rp + 3*8];
	r4 = [rp + 4*8];
	two51minus1 = crypto_scalarmult_curve25519_amd64_51_REDMASK51;
	two51minus19 = two51minus1;
	two51minus19 -= 18;
	loop = 3;
	while(loop > 0){
	t = r0;
	t >>= 51;
	r0 &= two51minus1;
	r1 += t;
	t = r1;
	t >>= 51;
	r1 &= two51minus1;
	r2 += t;
	t = r2;
	t >>= 51;
	r2 &= two51minus1;
	r3 += t;
	t = r3;
	t >>= 51;
	r3 &= two51minus1;
	r4 += t;
	t = r4;
	t >>= 51;
	r4 &= two51minus1;
	t *= 19;
	r0 += t;
  loop = loop - 1;
	}
	t = 1;
	//signed<? r0 - two51minus19 
	t = loop if (r0 <s two51minus19); /*t = loop if signed<*/
	eqf = (r1 == two51minus1);
	t = loop if !eqf;
	eqf = (r2 == two51minus1);
	t = loop if !eqf;
	eqf = (r3 == two51minus1);
	t = loop if !eqf;
	eqf = (r4 == two51minus1);
	t = loop if !eqf;
	t = -t;
	two51minus1 &= t;
	two51minus19 &= t;
	r0 -= two51minus19;
	r1 -= two51minus1;
	r2 -= two51minus1;
	r3 -= two51minus1;
	r4 -= two51minus1;
	[rp + 0*8] = r0;
	[rp + 1*8] = r1;
	[rp + 2*8] = r2;
	[rp + 3*8] = r3;
	[rp + 4*8] = r4;
	return;
}


