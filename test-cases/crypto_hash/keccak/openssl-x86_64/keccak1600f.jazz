export fn __KeccakF1600(){

	C[0] = S(A,4,0);
	C[1] = S(A,4,1);
	C[2] = S(A,4,2);
	C[3] = S(A,4,3);
	C[4] = S(A,4,4);
	// UNMATCHED: jmp	.Loop

	// UNMATCHED: .align	32

	// UNMATCHED: .Loop:

	D[0] = S(A,0,0);
	D[1] = S(A,1,1);
	D[2] = S(A,2,2);
	D[3] = S(A,3,3);
	C[2] ^= S(A,0,2);
	C[3] ^= S(A,0,3);
	C[0] ^= D[0];
	C[1] ^= S(A,0,1);
	C[2] ^= S(A,1,2);
	C[0] ^= S(A,1,0);
	D[4] = C[4];
	C[4] ^= S(A,0,4);
	C[2] ^= D[2];
	C[0] ^= S(A,2,0);
	C[3] ^= S(A,1,3);
	C[1] ^= D[1];
	C[4] ^= S(A,1,4);
	C[2] ^= S(A,3,2);
	C[0] ^= S(A,3,0);
	C[3] ^= S(A,2,3);
	C[1] ^= S(A,2,1);
	C[4] ^= S(A,2,4);
	T[0] = C[2];
	C[2] = ROL64(C[2], 1);
	// D[1] = ROL64(C[2], 1) ^ C[0]
	C[2] ^= C[0];
	C[3] ^= D[3];
	C[0] = ROL64(C[0], 1);
	// D[4] = ROL64(C[0], 1) ^ C[3]
	C[0] ^= C[3];
	C[1] ^= S(A,3,1);
	C[3] = ROL64(C[3], 1);
	// D[2] = ROL64(C[3], 1) ^ C[1]
	C[3] ^= C[1];
	C[4] ^= S(A,3,4);
	C[1] = ROL64(C[1], 1);
	// D[0] = ROL64(C[1], 1) ^ C[4]
	C[1] ^= C[4];
	C[4] = ROL64(C[4], 1);
	// D[3] = ROL64(C[4], 1) ^ C[2]
	C[4] ^= T[0];
	D[1] ^= C[2];
	D[2] ^= C[3];
	D[1] = ROL64(D[1], 44);
	D[3] ^= C[4];
	D[4] ^= C[0];
	D[2] = ROL64(D[2], 43);
	D[0] ^= C[1];
	T[0] = D[1];
	D[3] = ROL64(D[3], 21);
	D[1] |= D[2];
	//           C[0] ^ ( C[1] | C[2])
	D[1] ^= D[0];
	D[4] = ROL64(D[4], 14);
	D[1] ^= B(iotas,0);
	iotas += 8;
	T[1] = D[4];
	D[4] &= D[3];
	// R[0][0] = C[0] ^ ( C[1] | C[2]) ^ iotas[i]
	S(R,0,0) = D[1];
	//           C[2] ^ ( C[4] & C[3])
	D[4] ^= D[2];
	D[2] = !D[2];
	// R[0][2] = C[2] ^ ( C[4] & C[3])
	S(R,0,2) = D[4];
	D[2] |= D[3];
	D[4] = S(A,4,2);
	//           C[1] ^ (~C[2] | C[3])
	D[2] ^= T[0];
	// R[0][1] = C[1] ^ (~C[2] | C[3])
	S(R,0,1) = D[2];
	T[0] &= D[0];
	D[1] = S(A,1,4);
	//           C[4] ^ ( C[1] & C[0])
	T[0] ^= T[1];
	D[2] = S(A,2,0);
	// R[0][4] = C[4] ^ ( C[1] & C[0])
	S(R,0,4) = T[0];
	T[1] |= D[0];
	D[0] = S(A,0,3);
	//           C[3] ^ ( C[4] | C[0])
	T[1] ^= D[3];
	D[3] = S(A,3,1);
	// R[0][3] = C[3] ^ ( C[4] | C[0])
	S(R,0,3) = T[1];
	D[0] ^= C[4];
	D[4] ^= C[3];
	D[0] = ROL64(D[0], 28);
	D[3] ^= C[2];
	D[1] ^= C[0];
	D[4] = ROL64(D[4], 61);
	D[3] = ROL64(D[3], 45);
	D[2] ^= C[1];
	D[1] = ROL64(D[1], 20);
	T[0] = D[0];
	D[0] |= D[4];
	D[2] = ROL64(D[2], 3);
	//           C[3] ^ (C[0] |  C[4])
	D[0] ^= D[3];
	// R[1][3] = C[3] ^ (C[0] |  C[4])
	S(R,1,3) = D[0];
	T[1] = D[1];
	D[1] &= T[0];
	D[0] = S(A,0,1);
	//           C[4] ^ (C[1] &  C[0])
	D[1] ^= D[4];
	D[4] = !D[4];
	// R[1][4] = C[4] ^ (C[1] &  C[0])
	S(R,1,4) = D[1];
	D[4] |= D[3];
	D[1] = S(A,1,2);
	//           C[2] ^ (~C[4] | C[3])
	D[4] ^= D[2];
	// R[1][2] = C[2] ^ (~C[4] | C[3])
	S(R,1,2) = D[4];
	D[3] &= D[2];
	D[4] = S(A,4,0);
	//           C[1] ^ (C[3] &  C[2])
	D[3] ^= T[1];
	// R[1][1] = C[1] ^ (C[3] &  C[2])
	S(R,1,1) = D[3];
	T[1] |= D[2];
	D[2] = S(A,2,3);
	//           C[0] ^ (C[1] |  C[2])
	T[1] ^= T[0];
	D[3] = S(A,3,4);
	// R[1][0] = C[0] ^ (C[1] |  C[2])
	S(R,1,0) = T[1];
	D[2] ^= C[4];
	D[3] ^= C[0];
	D[2] = ROL64(D[2], 25);
	D[1] ^= C[3];
	D[3] = ROL64(D[3], 8);
	D[4] ^= C[1];
	D[1] = ROL64(D[1], 6);
	D[0] ^= C[2];
	D[4] = ROL64(D[4], 18);
	T[0] = D[2];
	D[2] &= D[3];
	D[0] = ROL64(D[0], 1);
	D[3] = !D[3];
	//            C[1] ^ ( C[2] & C[3])
	D[2] ^= D[1];
	// R[2][1] =  C[1] ^ ( C[2] & C[3])
	S(R,2,1) = D[2];
	T[1] = D[4];
	D[4] &= D[3];
	D[2] = S(A,2,1);
	//            C[2] ^ ( C[4] & ~C[3])
	D[4] ^= T[0];
	// R[2][2] =  C[2] ^ ( C[4] & ~C[3])
	S(R,2,2) = D[4];
	T[0] |= D[1];
	D[4] = S(A,4,3);
	//            C[0] ^ ( C[2] | C[1])
	T[0] ^= D[0];
	// R[2][0] =  C[0] ^ ( C[2] | C[1])
	S(R,2,0) = T[0];
	D[1] &= D[0];
	//            C[4] ^ ( C[1] & C[0])
	D[1] ^= T[1];
	// R[2][4] =  C[4] ^ ( C[1] & C[0])
	S(R,2,4) = D[1];
	T[1] |= D[0];
	D[1] = S(A,1,0);
	//           ~C[3] ^ ( C[0] | C[4])
	T[1] ^= D[3];
	D[3] = S(A,3,2);
	//           ~C[3] ^ ( C[0] | C[4])
	S(R,2,3) = T[1];
	D[0] = S(A,0,4);
	D[2] ^= C[2];
	D[3] ^= C[3];
	D[2] = ROL64(D[2], 10);
	D[1] ^= C[1];
	D[3] = ROL64(D[3], 15);
	D[4] ^= C[4];
	D[1] = ROL64(D[1], 36);
	D[0] ^= C[0];
	D[4] = ROL64(D[4], 56);
	T[0] = D[2];
	D[2] |= D[3];
	D[0] = ROL64(D[0], 27);
	D[3] = !D[3];
	//            C[1] ^ ( C[2] | C[3])
	D[2] ^= D[1];
	// R[3][1] =  C[1] ^ ( C[2] | C[3])
	S(R,3,1) = D[2];
	T[1] = D[4];
	D[4] |= D[3];
	//            C[2] ^ ( C[4] | ~C[3])
	D[4] ^= T[0];
	// R[3][2] =  C[2] ^ ( C[4] | ~C[3])
	S(R,3,2) = D[4];
	T[0] &= D[1];
	//            C[0] ^ ( C[2] & C[1])
	T[0] ^= D[0];
	// R[3][0] =  C[0] ^ ( C[2] & C[1])
	S(R,3,0) = T[0];
	D[1] |= D[0];
	//            C[4] ^ ( C[1] | C[0])
	D[1] ^= T[1];
	// R[3][4] =  C[4] ^ ( C[1] | C[0])
	S(R,3,4) = D[1];
	D[0] &= T[1];
	//           ~C[3] ^ ( C[0] & C[4])
	D[0] ^= D[3];
	// R[3][3] = ~C[3] ^ ( C[0] & C[4])
	S(R,3,3) = D[0];
	C[3] ^= S(A,0,2);
	C[4] ^= S(A,1,3);
	C[3] = ROL64(C[3], 62);
	C[2] ^= S(A,4,1);
	C[4] = ROL64(C[4], 55);
	C[0] ^= S(A,2,4);
	C[2] = ROL64(C[2], 2);
	C[1] ^= S(A,3,0);
	A, R = swap(A, R);
	C[0] = ROL64(C[0], 39);
	C[1] = ROL64(C[1], 41);
	T[0] = C[3];
	C[3] &= C[4];
	C[4] = !C[4];
	//            C[4] ^ ( C[0] & C[1])
	C[3] ^= C[2];
	// R[4][4] =  C[4] ^ ( C[0] & C[1])
	S(A,4,4) = C[3];
	T[1] = C[0];
	C[0] &= C[4];
	//            C[0] ^ ( C[2] & ~C[1])
	C[0] ^= T[0];
	// R[4][0] =  C[0] ^ ( C[2] & ~C[1])
	S(A,4,0) = C[0];
	T[0] |= C[2];
	//            C[3] ^ ( C[0] | C[4])
	T[0] ^= C[1];
	// R[4][3] =  C[3] ^ ( C[0] | C[4])
	S(A,4,3) = T[0];
	C[2] &= C[1];
	//            C[2] ^ ( C[4] & C[3])
	C[2] ^= T[1];
	// R[4][2] =  C[2] ^ ( C[4] & C[3])
	S(A,4,2) = C[2];
	C[1] |= T[1];
	//           ~C[1] ^ ( C[2] | C[3])
	C[1] ^= C[4];
	// R[4][1] = ~C[1] ^ ( C[2] | C[3])
	S(A,4,1) = C[1];
	// harmonize with the loop top
	C[4] = C[3];
	C[3] = T[0];
	// UNMATCHED: test	$255,iotas

	// UNMATCHED: jnz	.Loop

	// rewind iotas
	iotas -= 192;
	return;
}


