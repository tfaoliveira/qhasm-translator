int64 b64
int64 synd
int64 addr
int64 c
int64 c_all
int64 row
reg128 p
reg128 e
reg128 s
int64 buf_ptr
stack128 buf
enter syndrome_asm
input_1 += 1357008
buf_ptr = &buf
row = 1664

loop:

row -= 1
s = mem128[ input_1 + 0 ]
e = mem128[ input_2 + 208 ]
s &= e
p = mem128[ input_1 + 16 ]
e = mem128[ input_2 + 224 ]
p &= e
s ^= p
p = mem128[ input_1 + 32 ]
e = mem128[ input_2 + 240 ]
p &= e
s ^= p
p = mem128[ input_1 + 48 ]
e = mem128[ input_2 + 256 ]
p &= e
s ^= p
p = mem128[ input_1 + 64 ]
e = mem128[ input_2 + 272 ]
p &= e
s ^= p
p = mem128[ input_1 + 80 ]
e = mem128[ input_2 + 288 ]
p &= e
s ^= p
p = mem128[ input_1 + 96 ]
e = mem128[ input_2 + 304 ]
p &= e
s ^= p
p = mem128[ input_1 + 112 ]
e = mem128[ input_2 + 320 ]
p &= e
s ^= p
p = mem128[ input_1 + 128 ]
e = mem128[ input_2 + 336 ]
p &= e
s ^= p
p = mem128[ input_1 + 144 ]
e = mem128[ input_2 + 352 ]
p &= e
s ^= p
p = mem128[ input_1 + 160 ]
e = mem128[ input_2 + 368 ]
p &= e
s ^= p
p = mem128[ input_1 + 176 ]
e = mem128[ input_2 + 384 ]
p &= e
s ^= p
p = mem128[ input_1 + 192 ]
e = mem128[ input_2 + 400 ]
p &= e
s ^= p
p = mem128[ input_1 + 208 ]
e = mem128[ input_2 + 416 ]
p &= e
s ^= p
p = mem128[ input_1 + 224 ]
e = mem128[ input_2 + 432 ]
p &= e
s ^= p
p = mem128[ input_1 + 240 ]
e = mem128[ input_2 + 448 ]
p &= e
s ^= p
p = mem128[ input_1 + 256 ]
e = mem128[ input_2 + 464 ]
p &= e
s ^= p
p = mem128[ input_1 + 272 ]
e = mem128[ input_2 + 480 ]
p &= e
s ^= p
p = mem128[ input_1 + 288 ]
e = mem128[ input_2 + 496 ]
p &= e
s ^= p
p = mem128[ input_1 + 304 ]
e = mem128[ input_2 + 512 ]
p &= e
s ^= p
p = mem128[ input_1 + 320 ]
e = mem128[ input_2 + 528 ]
p &= e
s ^= p
p = mem128[ input_1 + 336 ]
e = mem128[ input_2 + 544 ]
p &= e
s ^= p
p = mem128[ input_1 + 352 ]
e = mem128[ input_2 + 560 ]
p &= e
s ^= p
p = mem128[ input_1 + 368 ]
e = mem128[ input_2 + 576 ]
p &= e
s ^= p
p = mem128[ input_1 + 384 ]
e = mem128[ input_2 + 592 ]
p &= e
s ^= p
p = mem128[ input_1 + 400 ]
e = mem128[ input_2 + 608 ]
p &= e
s ^= p
p = mem128[ input_1 + 416 ]
e = mem128[ input_2 + 624 ]
p &= e
s ^= p
p = mem128[ input_1 + 432 ]
e = mem128[ input_2 + 640 ]
p &= e
s ^= p
p = mem128[ input_1 + 448 ]
e = mem128[ input_2 + 656 ]
p &= e
s ^= p
p = mem128[ input_1 + 464 ]
e = mem128[ input_2 + 672 ]
p &= e
s ^= p
p = mem128[ input_1 + 480 ]
e = mem128[ input_2 + 688 ]
p &= e
s ^= p
p = mem128[ input_1 + 496 ]
e = mem128[ input_2 + 704 ]
p &= e
s ^= p
p = mem128[ input_1 + 512 ]
e = mem128[ input_2 + 720 ]
p &= e
s ^= p
p = mem128[ input_1 + 528 ]
e = mem128[ input_2 + 736 ]
p &= e
s ^= p
p = mem128[ input_1 + 544 ]
e = mem128[ input_2 + 752 ]
p &= e
s ^= p
p = mem128[ input_1 + 560 ]
e = mem128[ input_2 + 768 ]
p &= e
s ^= p
p = mem128[ input_1 + 576 ]
e = mem128[ input_2 + 784 ]
p &= e
s ^= p
p = mem128[ input_1 + 592 ]
e = mem128[ input_2 + 800 ]
p &= e
s ^= p
p = mem128[ input_1 + 608 ]
e = mem128[ input_2 + 816 ]
p &= e
s ^= p
p = mem128[ input_1 + 624 ]
e = mem128[ input_2 + 832 ]
p &= e
s ^= p
p = mem128[ input_1 + 640 ]
e = mem128[ input_2 + 848 ]
p &= e
s ^= p
p = mem128[ input_1 + 656 ]
e = mem128[ input_2 + 864 ]
p &= e
s ^= p
p = mem128[ input_1 + 672 ]
e = mem128[ input_2 + 880 ]
p &= e
s ^= p
p = mem128[ input_1 + 688 ]
e = mem128[ input_2 + 896 ]
p &= e
s ^= p
p = mem128[ input_1 + 704 ]
e = mem128[ input_2 + 912 ]
p &= e
s ^= p
p = mem128[ input_1 + 720 ]
e = mem128[ input_2 + 928 ]
p &= e
s ^= p
p = mem128[ input_1 + 736 ]
e = mem128[ input_2 + 944 ]
p &= e
s ^= p
p = mem128[ input_1 + 752 ]
e = mem128[ input_2 + 960 ]
p &= e
s ^= p
p = mem128[ input_1 + 768 ]
e = mem128[ input_2 + 976 ]
p &= e
s ^= p
p = mem128[ input_1 + 784 ]
e = mem128[ input_2 + 992 ]
p &= e
s ^= p
p = mem128[ input_1 + 800 ]
e = mem128[ input_2 + 1008 ]
p &= e
s ^= p

buf = s
b64 = mem64[ buf_ptr + 0 ]
c_all = count(b64)
b64 = mem64[ buf_ptr + 8 ]
c = count(b64)
c_all ^= c

addr = row
(uint64) addr >>= 3
addr += input_0
synd = *(uint8  *) (addr + 0)
synd <<= 1
(uint32) c_all &= 1
synd |= c_all
*(uint8  *) (addr + 0) = synd
input_1 -= 816
=? row-0

goto loop if !=

s = mem128[ input_0 + 0 ]
e = mem128[ input_2 + 0 ]
s ^= e
mem128[ input_0 + 0 ] = s
s = mem128[ input_0 + 16 ]
e = mem128[ input_2 + 16 ]
s ^= e
mem128[ input_0 + 16 ] = s
s = mem128[ input_0 + 32 ]
e = mem128[ input_2 + 32 ]
s ^= e
mem128[ input_0 + 32 ] = s
s = mem128[ input_0 + 48 ]
e = mem128[ input_2 + 48 ]
s ^= e
mem128[ input_0 + 48 ] = s
s = mem128[ input_0 + 64 ]
e = mem128[ input_2 + 64 ]
s ^= e
mem128[ input_0 + 64 ] = s
s = mem128[ input_0 + 80 ]
e = mem128[ input_2 + 80 ]
s ^= e
mem128[ input_0 + 80 ] = s
s = mem128[ input_0 + 96 ]
e = mem128[ input_2 + 96 ]
s ^= e
mem128[ input_0 + 96 ] = s
s = mem128[ input_0 + 112 ]
e = mem128[ input_2 + 112 ]
s ^= e
mem128[ input_0 + 112 ] = s
s = mem128[ input_0 + 128 ]
e = mem128[ input_2 + 128 ]
s ^= e
mem128[ input_0 + 128 ] = s
s = mem128[ input_0 + 144 ]
e = mem128[ input_2 + 144 ]
s ^= e
mem128[ input_0 + 144 ] = s
s = mem128[ input_0 + 160 ]
e = mem128[ input_2 + 160 ]
s ^= e
mem128[ input_0 + 160 ] = s
s = mem128[ input_0 + 176 ]
e = mem128[ input_2 + 176 ]
s ^= e
mem128[ input_0 + 176 ] = s
s = mem128[ input_0 + 192 ]
e = mem128[ input_2 + 192 ]
s ^= e
mem128[ input_0 + 192 ] = s
return
