//int64 _ptr
//# FIX
//# FIX
export fn vec128_mul_asm(reg u64 input_0, reg u64 input_1, reg u64 input_2, reg u64 input_3){
	 reg u256 a0;
	 reg u256 a1;
	 reg u256 a2;
	 reg u256 a3;
	 reg u256 a4;
	 reg u256 a5;
	 reg u256 a6;
	 reg u256 b0;
	 reg u256 b1;
	 reg u256 b10;
	 reg u256 b11;
	 reg u256 b12;
	 reg u256 b2;
	 reg u256 b3;
	 reg u256 b4;
	 reg u256 b5;
	 reg u256 b6;
	 reg u256 b7;
	 reg u256 b8;
	 reg u256 b9;
	 stack u256[19] buf;
	 reg u128 h0;
	 reg u128 h1;
	 reg u128 h10;
	 reg u128 h11;
	 reg u128 h12;
	 reg u128 h13;
	 reg u128 h14;
	 reg u128 h15;
	 reg u128 h16;
	 reg u128 h17;
	 reg u128 h18;
	 reg u128 h19;
	 reg u128 h2;
	 reg u128 h20;
	 reg u128 h21;
	 reg u128 h22;
	 reg u128 h23;
	 reg u128 h24;
	 reg u128 h3;
	 reg u128 h4;
	 reg u128 h5;
	 reg u128 h6;
	 reg u128 h7;
	 reg u128 h8;
	 reg u128 h9;
	 reg ptr u256[19] _ptr;
	 reg u256 r;
	 reg u256 r0;
	 reg u256 r1;
	 reg u256 r10;
	 reg u256 r11;
	 reg u256 r12;
	 reg u256 r13;
	 reg u256 r14;
	 reg u256 r15;
	 reg u256 r16;
	 reg u256 r17;
	 reg u256 r18;
	 reg u256 r2;
	 reg u256 r3;
	 reg u256 r4;
	 reg u256 r5;
	 reg u256 r6;
	 reg u256 r7;
	 reg u256 r8;
	 reg u256 r9;
	 reg u64 tmp;

	_ptr = buf;
	tmp = input_3;  //tmp = input_3
	tmp *= 12;  //tmp *= 12
	input_2 += tmp;  //input_2 += tmp
	b12 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	a6 = a6 ^ a6;
	a6 = #VINSERTI128(a6, (u128)[input_1 + 96], 0);
	r18 = b12 & a6;
	_ptr[18] = r18;
	a5 = #VINSERTI128(a5, (u128)[input_1 + 80], 0);
	a5 = #VINSERTI128(a5, (u128)[input_1 + 192], 1);
	r17 = b12 & a5;
	a4 = #VINSERTI128(a4, (u128)[input_1 + 64], 0);
	a4 = #VINSERTI128(a4, (u128)[input_1 + 176], 1);
	r16 = b12 & a4;
	a3 = #VINSERTI128(a3, (u128)[input_1 + 48], 0);
	a3 = #VINSERTI128(a3, (u128)[input_1 + 160], 1);
	r15 = b12 & a3;
	a2 = #VINSERTI128(a2, (u128)[input_1 + 32], 0);
	a2 = #VINSERTI128(a2, (u128)[input_1 + 144], 1);
	r14 = b12 & a2;
	a1 = #VINSERTI128(a1, (u128)[input_1 + 16], 0);
	a1 = #VINSERTI128(a1, (u128)[input_1 + 128], 1);
	r13 = b12 & a1;
	a0 = #VINSERTI128(a0, (u128)[input_1 + 0], 0);
	a0 = #VINSERTI128(a0, (u128)[input_1 + 112], 1);
	r12 = b12 & a0;
	b11 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b11 & a6;
	r17 ^= r;
	_ptr[17] = r17;
	r = b11 & a5;
	r16 ^= r;
	r = b11 & a4;
	r15 ^= r;
	r = b11 & a3;
	r14 ^= r;
	r = b11 & a2;
	r13 ^= r;
	r = b11 & a1;
	r12 ^= r;
	r11 = b11 & a0;
	b10 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b10 & a6;
	r16 ^= r;
	_ptr[16] = r16;
	r = b10 & a5;
	r15 ^= r;
	r = b10 & a4;
	r14 ^= r;
	r = b10 & a3;
	r13 ^= r;
	r = b10 & a2;
	r12 ^= r;
	r = b10 & a1;
	r11 ^= r;
	r10 = b10 & a0;
	b9 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b9 & a6;
	r15 ^= r;
	_ptr[15] = r15;
	r = b9 & a5;
	r14 ^= r;
	r = b9 & a4;
	r13 ^= r;
	r = b9 & a3;
	r12 ^= r;
	r = b9 & a2;
	r11 ^= r;
	r = b9 & a1;
	r10 ^= r;
	r9 = b9 & a0;
	b8 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b8 & a6;
	r14 ^= r;
	_ptr[14] = r14;
	r = b8 & a5;
	r13 ^= r;
	r = b8 & a4;
	r12 ^= r;
	r = b8 & a3;
	r11 ^= r;
	r = b8 & a2;
	r10 ^= r;
	r = b8 & a1;
	r9 ^= r;
	r8 = b8 & a0;
	b7 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b7 & a6;
	r13 ^= r;
	_ptr[13] = r13;
	r = b7 & a5;
	r12 ^= r;
	r = b7 & a4;
	r11 ^= r;
	r = b7 & a3;
	r10 ^= r;
	r = b7 & a2;
	r9 ^= r;
	r = b7 & a1;
	r8 ^= r;
	r7 = b7 & a0;
	b6 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b6 & a6;
	r12 ^= r;
	_ptr[12] = r12;
	r = b6 & a5;
	r11 ^= r;
	r = b6 & a4;
	r10 ^= r;
	r = b6 & a3;
	r9 ^= r;
	r = b6 & a2;
	r8 ^= r;
	r = b6 & a1;
	r7 ^= r;
	r6 = b6 & a0;
	b5 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b5 & a6;
	r11 ^= r;
	_ptr[11] = r11;
	r = b5 & a5;
	r10 ^= r;
	r = b5 & a4;
	r9 ^= r;
	r = b5 & a3;
	r8 ^= r;
	r = b5 & a2;
	r7 ^= r;
	r = b5 & a1;
	r6 ^= r;
	r5 = b5 & a0;
	b4 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b4 & a6;
	r10 ^= r;
	_ptr[10] = r10;
	r = b4 & a5;
	r9 ^= r;
	r = b4 & a4;
	r8 ^= r;
	r = b4 & a3;
	r7 ^= r;
	r = b4 & a2;
	r6 ^= r;
	r = b4 & a1;
	r5 ^= r;
	r4 = b4 & a0;
	b3 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b3 & a6;
	r9 ^= r;
	_ptr[9] = r9;
	r = b3 & a5;
	r8 ^= r;
	r = b3 & a4;
	r7 ^= r;
	r = b3 & a3;
	r6 ^= r;
	r = b3 & a2;
	r5 ^= r;
	r = b3 & a1;
	r4 ^= r;
	r3 = b3 & a0;
	b2 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b2 & a6;
	r8 ^= r;
	_ptr[8] = r8;
	r = b2 & a5;
	r7 ^= r;
	r = b2 & a4;
	r6 ^= r;
	r = b2 & a3;
	r5 ^= r;
	r = b2 & a2;
	r4 ^= r;
	r = b2 & a1;
	r3 ^= r;
	r2 = b2 & a0;
	b1 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b1 & a6;
	r7 ^= r;
	_ptr[7] = r7;
	r = b1 & a5;
	r6 ^= r;
	r = b1 & a4;
	r5 ^= r;
	r = b1 & a3;
	r4 ^= r;
	r = b1 & a2;
	r3 ^= r;
	r = b1 & a1;
	r2 ^= r;
	r1 = b1 & a0;
	b0 = #VPBROADCAST_2u128((u128)[input_2 + 0]);
	input_2 -= input_3;  //input_2 -= input_3
	r = b0 & a6;
	r6 ^= r;
	_ptr[6] = r6;
	r = b0 & a5;
	r5 ^= r;
	r = b0 & a4;
	r4 ^= r;
	r = b0 & a3;
	r3 ^= r;
	r = b0 & a2;
	r2 ^= r;
	r = b0 & a1;
	r1 ^= r;
	r0 = b0 & a0;
	_ptr[5] = r5;
	_ptr[4] = r4;
	_ptr[3] = r3;
	_ptr[2] = r2;
	_ptr[1] = r1;
	_ptr[0] = r0;
	// UNMATCHED: vzeroupper

	h24 = _ptr.[u128 560];
	h11 = h24;
	h12 = h24;
	h14 = h24;
	h15 = h24;
	h23 = _ptr.[u128 528];
	h10 = h23;
	h11 = h11 ^ h23;
	h13 = h23;
	h14 = h14 ^ h23;
	h22 = _ptr.[u128 496];
	h9 = h22;
	h10 = h10 ^ h22;
	h12 = h12 ^ h22;
	h13 = h13 ^ h22;
	h21 = _ptr.[u128 464];
	h8 = h21;
	h9 = h9 ^ h21;
	h11 = h11 ^ h21;
	h12 = h12 ^ h21;
	h20 = _ptr.[u128 432];
	h7 = h20;
	h8 = h8 ^ h20;
	h10 = h10 ^ h20;
	h11 = h11 ^ h20;
	h19 = _ptr.[u128 400];
	h6 = h19;
	h7 = h7 ^ h19;
	h9 = h9 ^ h19;
	h10 = h10 ^ h19;
	h18 = _ptr.[u128 368];
	h18 = h18 ^ _ptr.[u128 576];
	h5 = h18;
	h6 = h6 ^ h18;
	h8 = h8 ^ h18;
	h9 = h9 ^ h18;
	h17 = _ptr.[u128 336];
	h17 = h17 ^ _ptr.[u128 544];
	h4 = h17;
	h5 = h5 ^ h17;
	h7 = h7 ^ h17;
	h8 = h8 ^ h17;
	h16 = _ptr.[u128 304];
	h16 = h16 ^ _ptr.[u128 512];
	h3 = h16;
	h4 = h4 ^ h16;
	h6 = h6 ^ h16;
	h7 = h7 ^ h16;
	h15 = h15 ^ _ptr.[u128 272];
	h15 = h15 ^ _ptr.[u128 480];
	h2 = h15;
	h3 = h3 ^ h15;
	h5 = h5 ^ h15;
	h6 = h6 ^ h15;
	h14 = h14 ^ _ptr.[u128 240];
	h14 = h14 ^ _ptr.[u128 448];
	h1 = h14;
	h2 = h2 ^ h14;
	h4 = h4 ^ h14;
	h5 = h5 ^ h14;
	h13 = h13 ^ _ptr.[u128 208];
	h13 = h13 ^ _ptr.[u128 416];
	h0 = h13;
	h1 = h1 ^ h13;
	h3 = h3 ^ h13;
	h4 = h4 ^ h13;
	h12 = h12 ^ _ptr.[u128 384];
	h12 = h12 ^ _ptr.[u128 176];
	(u128)[input_0 + 192] = h12;
	h11 = h11 ^ _ptr.[u128 352];
	h11 = h11 ^ _ptr.[u128 144];
	(u128)[input_0 + 176] = h11;
	h10 = h10 ^ _ptr.[u128 320];
	h10 = h10 ^ _ptr.[u128 112];
	(u128)[input_0 + 160] = h10;
	h9 = h9 ^ _ptr.[u128 288];
	h9 = h9 ^ _ptr.[u128 80];
	(u128)[input_0 + 144] = h9;
	h8 = h8 ^ _ptr.[u128 256];
	h8 = h8 ^ _ptr.[u128 48];
	(u128)[input_0 + 128] = h8;
	h7 = h7 ^ _ptr.[u128 224];
	h7 = h7 ^ _ptr.[u128 16];
	(u128)[input_0 + 112] = h7;
	h6 = h6 ^ _ptr.[u128 192];
	(u128)[input_0 + 96] = h6;
	h5 = h5 ^ _ptr.[u128 160];
	(u128)[input_0 + 80] = h5;
	h4 = h4 ^ _ptr.[u128 128];
	(u128)[input_0 + 64] = h4;
	h3 = h3 ^ _ptr.[u128 96];
	(u128)[input_0 + 48] = h3;
	h2 = h2 ^ _ptr.[u128 64];
	(u128)[input_0 + 32] = h2;
	h1 = h1 ^ _ptr.[u128 32];
	(u128)[input_0 + 16] = h1;
	h0 = h0 ^ _ptr.[u128 0];
	(u128)[input_0 + 0] = h0;
	return;
}


