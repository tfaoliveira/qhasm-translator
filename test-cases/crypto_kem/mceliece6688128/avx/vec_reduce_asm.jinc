//# FIX
//# FIX
export fn vec_reduce_asm(reg u64 input_0){
	 reg u64 c;
	 reg u64 r;
	 reg u64 t0;
	 reg u64 t1;

	r = 0;  //r = 0
	t0 = (u64)[input_0 + 192];
	t1 = (u64)[input_0 + 200];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 176];
	t1 = (u64)[input_0 + 184];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 160];
	t1 = (u64)[input_0 + 168];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 144];
	t1 = (u64)[input_0 + 152];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 128];
	t1 = (u64)[input_0 + 136];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 112];
	t1 = (u64)[input_0 + 120];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 96];
	t1 = (u64)[input_0 + 104];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 80];
	t1 = (u64)[input_0 + 88];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 64];
	t1 = (u64)[input_0 + 72];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 48];
	t1 = (u64)[input_0 + 56];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 32];
	t1 = (u64)[input_0 + 40];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 16];
	t1 = (u64)[input_0 + 24];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	t0 = (u64)[input_0 + 0];
	t1 = (u64)[input_0 + 8];
	t0 ^= t1;  //t0 ^= t1
	_, _, _, _, _, c = #POPCNT_64(t0);//c = count(t0)
	// UNMATCHED: (uint32) c &= 1

	r <<= 1;  //r <<= 1
	r |= c;  //r |= c
	//return r
	return;
}


