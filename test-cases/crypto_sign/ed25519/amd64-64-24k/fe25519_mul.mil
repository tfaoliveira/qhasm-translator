param int crypto_sign_ed25519_amd64_64_38 = 38;
export fn crypto_sign_ed25519_amd64_64_fe25519_mul(reg u64 rp, reg u64 xp, reg u64 yp){
	 reg bool cf;
	 reg u64 mulc;
	 reg u64 mulr4;
	 reg u64 mulr5;
	 reg u64 mulr6;
	 reg u64 mulr7;
	 reg u64 mulr8;
	 reg u64 mulrax;
	 reg u64 mulrdx;
	 reg u64 mulx0;
	 reg u64 mulx1;
	 reg u64 mulx2;
	 reg u64 mulx3;
	 reg u64 mulzero;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;

	yp = yp;  //yp = yp
	mulr4 = 0;  //mulr4 = 0
	mulr5 = 0;  //mulr5 = 0
	mulr6 = 0;  //mulr6 = 0
	mulr7 = 0;  //mulr7 = 0
	mulx0 = [xp + 0*8];  //mulx0 = *(uint64 *) (xp + 0)
	mulrax = [yp + 0*8];  //mulrax = *(uint64 *) (yp + 0)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	r0 = mulrax;  //r0 = mulrax
	r1 = mulrdx;  //r1 = mulrdx
	mulrax = [yp + 1*8];  //mulrax = *(uint64 *) (yp + 8)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, r1 += mulrax;  //cf? r1 += mulrax
	r2 = 0;  //r2 = 0
	_, r2 += mulrdx + cf;  //r2 += mulrdx + cf; 
	mulrax = [yp + 2*8];  //mulrax = *(uint64 *) (yp + 16)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, r2 += mulrax;  //cf? r2 += mulrax
	r3 = 0;  //r3 = 0
	_, r3 += mulrdx + cf;  //r3 += mulrdx + cf; 
	mulrax = [yp + 3*8];  //mulrax = *(uint64 *) (yp + 24)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulr4 += mulrdx + cf;  //mulr4 += mulrdx + cf; 
	mulx1 = [xp + 1*8];  //mulx1 = *(uint64 *) (xp + 8)
	mulrax = [yp + 0*8];  //mulrax = *(uint64 *) (yp + 0)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, r1 += mulrax;  //cf? r1 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 1*8];  //mulrax = *(uint64 *) (yp + 8)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, r2 += mulrax;  //cf? r2 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, r2 += mulc;  //cf? r2 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 2*8];  //mulrax = *(uint64 *) (yp + 16)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, r3 += mulc;  //cf? r3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 3*8];  //mulrax = *(uint64 *) (yp + 24)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	_, mulr5 += mulrdx + cf;  //mulr5 += mulrdx + cf; 
	mulx2 = [xp + 2*8];  //mulx2 = *(uint64 *) (xp + 16)
	mulrax = [yp + 0*8];  //mulrax = *(uint64 *) (yp + 0)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, r2 += mulrax;  //cf? r2 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 1*8];  //mulrax = *(uint64 *) (yp + 8)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, r3 += mulrax;  //cf? r3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, r3 += mulc;  //cf? r3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 2*8];  //mulrax = *(uint64 *) (yp + 16)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 3*8];  //mulrax = *(uint64 *) (yp + 24)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulx3 = [xp + 3*8];  //mulx3 = *(uint64 *) (xp + 24)
	mulrax = [yp + 0*8];  //mulrax = *(uint64 *) (yp + 0)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, r3 += mulrax;  //cf? r3 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 1*8];  //mulrax = *(uint64 *) (yp + 8)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 2*8];  //mulrax = *(uint64 *) (yp + 16)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [yp + 3*8];  //mulrax = *(uint64 *) (yp + 24)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr6 += mulc;  //cf? mulr6 += mulc
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrax = mulr4;  //mulrax = mulr4
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	mulr4 = mulrax;  //mulr4 = mulrax
	mulrax = mulr5;  //mulrax = mulr5
	mulr5 = mulrdx;  //mulr5 = mulrdx
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	mulrax = mulr6;  //mulrax = mulr6
	mulr6 = 0;  //mulr6 = 0
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	mulrax = mulr7;  //mulrax = mulr7
	mulr7 = 0;  //mulr7 = 0
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr7 += mulrax;  //cf? mulr7 += mulrax
	mulr8 = 0;  //mulr8 = 0
	_, mulr8 += mulrdx + cf;  //mulr8 += mulrdx + cf; 
	cf, r0 += mulr4;  //cf? r0 += mulr4
	cf, r1 += mulr5 + cf;  //cf? r1 += mulr5 + cf; 
	cf, r2 += mulr6 + cf;  //cf? r2 += mulr6 + cf; 
	cf, r3 += mulr7 + cf;  //cf? r3 += mulr7 + cf; 
	mulzero = 0;  //mulzero = 0
	_, mulr8 += mulzero + cf;  //mulr8 += mulzero + cf; 
	mulr8 *= 38;  //mulr8 *= 38
	cf, r0 += mulr8;  //cf? r0 += mulr8
	cf, r1 += mulzero + cf;  //cf? r1 += mulzero + cf; 
	cf, r2 += mulzero + cf;  //cf? r2 += mulzero + cf; 
	cf, r3 += mulzero + cf;  //cf? r3 += mulzero + cf; 
	_, mulzero += mulzero + cf;  //mulzero += mulzero + cf; 
	mulzero *= 38;  //mulzero *= 38
	r0 += mulzero;  //r0 += mulzero
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	return;
}


