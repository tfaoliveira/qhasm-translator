export fn
crypto_sign_ed25519_amd64_64_choose_t(reg u64 tp, reg u64 pos, reg u64 b, reg u64 basep)
{
    reg bool        cf;
    reg bool        eqf;
    reg u64         mask;
    reg bool        slf;
    reg u64         subt0;
    reg u64         subt1;
    reg u64         t;
    stack u64       tp_stack;
    reg u64         tt0;
    reg u64         tt1;
    reg u64         tt2;
    reg u64         tt2d0;
    reg u64         tt2d1;
    reg u64         tt2d2;
    reg u64         tt2d3;
    reg u64         tt3;
    reg u64         txaddy0;
    reg u64         txaddy1;
    reg u64         txaddy2;
    reg u64         txaddy3;
    reg u64         tysubx0;
    reg u64         tysubx1;
    reg u64         tysubx2;
    reg u64         tysubx3;
    reg u64         u;

    tp_stack = tp;              // tp_stack = tp
    pos *= 768;                 // pos *= 768
    mask = b;                   // mask = b
    mask >>=s 7;               // mask >>= 7
    u = b;                      // u = b
    u += mask;                  // u += mask
    u ^= mask;                  // u ^= mask
    tysubx0 = 1;                // tysubx0 = 1
    tysubx1 = 0;                // tysubx1 = 0
    tysubx2 = 0;                // tysubx2 = 0
    tysubx3 = 0;                // tysubx3 = 0
    txaddy0 = 1;                // txaddy0 = 1
    txaddy1 = 0;                // txaddy1 = 0
    txaddy2 = 0;                // txaddy2 = 0
    txaddy3 = 0;                // txaddy3 = 0
    eqf = (u == 1);
    t = [basep + 0 + pos];       // t = *(uint64 *) (basep + 0 + pos)
    tysubx0 = t if eqf;
    t = [basep + 8 + pos];       // t = *(uint64 *) (basep + 8 + pos)
    tysubx1 = t if eqf;
    t = [basep + 16 + pos];      // t = *(uint64 *) (basep + 16 + pos)
    tysubx2 = t if eqf;
    t = [basep + 24 + pos];      // t = *(uint64 *) (basep + 24 + pos)
    tysubx3 = t if eqf;
    t = [basep + 32 + pos];      // t = *(uint64 *) (basep + 32 + pos)
    txaddy0 = t if eqf;
    t = [basep + 40 + pos];      // t = *(uint64 *) (basep + 40 + pos)
    txaddy1 = t if eqf;
    t = [basep + 48 + pos];      // t = *(uint64 *) (basep + 48 + pos)
    txaddy2 = t if eqf;
    t = [basep + 56 + pos];      // t = *(uint64 *) (basep + 56 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 2);
    t = [basep + 96 + pos];      // t = *(uint64 *) (basep + 96 + pos)
    tysubx0 = t if eqf;
    t = [basep + 104 + pos];     // t = *(uint64 *) (basep + 104 + pos)
    tysubx1 = t if eqf;
    t = [basep + 112 + pos];     // t = *(uint64 *) (basep + 112 + pos)
    tysubx2 = t if eqf;
    t = [basep + 120 + pos];     // t = *(uint64 *) (basep + 120 + pos)
    tysubx3 = t if eqf;
    t = [basep + 128 + pos];     // t = *(uint64 *) (basep + 128 + pos)
    txaddy0 = t if eqf;
    t = [basep + 136 + pos];     // t = *(uint64 *) (basep + 136 + pos)
    txaddy1 = t if eqf;
    t = [basep + 144 + pos];     // t = *(uint64 *) (basep + 144 + pos)
    txaddy2 = t if eqf;
    t = [basep + 152 + pos];     // t = *(uint64 *) (basep + 152 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 3);
    t = [basep + 192 + pos];     // t = *(uint64 *) (basep + 192 + pos)
    tysubx0 = t if eqf;
    t = [basep + 200 + pos];     // t = *(uint64 *) (basep + 200 + pos)
    tysubx1 = t if eqf;
    t = [basep + 208 + pos];     // t = *(uint64 *) (basep + 208 + pos)
    tysubx2 = t if eqf;
    t = [basep + 216 + pos];     // t = *(uint64 *) (basep + 216 + pos)
    tysubx3 = t if eqf;
    t = [basep + 224 + pos];     // t = *(uint64 *) (basep + 224 + pos)
    txaddy0 = t if eqf;
    t = [basep + 232 + pos];     // t = *(uint64 *) (basep + 232 + pos)
    txaddy1 = t if eqf;
    t = [basep + 240 + pos];     // t = *(uint64 *) (basep + 240 + pos)
    txaddy2 = t if eqf;
    t = [basep + 248 + pos];     // t = *(uint64 *) (basep + 248 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 4);
    t = [basep + 288 + pos];     // t = *(uint64 *) (basep + 288 + pos)
    tysubx0 = t if eqf;
    t = [basep + 296 + pos];     // t = *(uint64 *) (basep + 296 + pos)
    tysubx1 = t if eqf;
    t = [basep + 304 + pos];     // t = *(uint64 *) (basep + 304 + pos)
    tysubx2 = t if eqf;
    t = [basep + 312 + pos];     // t = *(uint64 *) (basep + 312 + pos)
    tysubx3 = t if eqf;
    t = [basep + 320 + pos];     // t = *(uint64 *) (basep + 320 + pos)
    txaddy0 = t if eqf;
    t = [basep + 328 + pos];     // t = *(uint64 *) (basep + 328 + pos)
    txaddy1 = t if eqf;
    t = [basep + 336 + pos];     // t = *(uint64 *) (basep + 336 + pos)
    txaddy2 = t if eqf;
    t = [basep + 344 + pos];     // t = *(uint64 *) (basep + 344 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 5);
    t = [basep + 384 + pos];     // t = *(uint64 *) (basep + 384 + pos)
    tysubx0 = t if eqf;
    t = [basep + 392 + pos];     // t = *(uint64 *) (basep + 392 + pos)
    tysubx1 = t if eqf;
    t = [basep + 400 + pos];     // t = *(uint64 *) (basep + 400 + pos)
    tysubx2 = t if eqf;
    t = [basep + 408 + pos];     // t = *(uint64 *) (basep + 408 + pos)
    tysubx3 = t if eqf;
    t = [basep + 416 + pos];     // t = *(uint64 *) (basep + 416 + pos)
    txaddy0 = t if eqf;
    t = [basep + 424 + pos];     // t = *(uint64 *) (basep + 424 + pos)
    txaddy1 = t if eqf;
    t = [basep + 432 + pos];     // t = *(uint64 *) (basep + 432 + pos)
    txaddy2 = t if eqf;
    t = [basep + 440 + pos];     // t = *(uint64 *) (basep + 440 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 6);
    t = [basep + 480 + pos];     // t = *(uint64 *) (basep + 480 + pos)
    tysubx0 = t if eqf;
    t = [basep + 488 + pos];     // t = *(uint64 *) (basep + 488 + pos)
    tysubx1 = t if eqf;
    t = [basep + 496 + pos];     // t = *(uint64 *) (basep + 496 + pos)
    tysubx2 = t if eqf;
    t = [basep + 504 + pos];     // t = *(uint64 *) (basep + 504 + pos)
    tysubx3 = t if eqf;
    t = [basep + 512 + pos];     // t = *(uint64 *) (basep + 512 + pos)
    txaddy0 = t if eqf;
    t = [basep + 520 + pos];     // t = *(uint64 *) (basep + 520 + pos)
    txaddy1 = t if eqf;
    t = [basep + 528 + pos];     // t = *(uint64 *) (basep + 528 + pos)
    txaddy2 = t if eqf;
    t = [basep + 536 + pos];     // t = *(uint64 *) (basep + 536 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 7);
    t = [basep + 576 + pos];     // t = *(uint64 *) (basep + 576 + pos)
    tysubx0 = t if eqf;
    t = [basep + 584 + pos];     // t = *(uint64 *) (basep + 584 + pos)
    tysubx1 = t if eqf;
    t = [basep + 592 + pos];     // t = *(uint64 *) (basep + 592 + pos)
    tysubx2 = t if eqf;
    t = [basep + 600 + pos];     // t = *(uint64 *) (basep + 600 + pos)
    tysubx3 = t if eqf;
    t = [basep + 608 + pos];     // t = *(uint64 *) (basep + 608 + pos)
    txaddy0 = t if eqf;
    t = [basep + 616 + pos];     // t = *(uint64 *) (basep + 616 + pos)
    txaddy1 = t if eqf;
    t = [basep + 624 + pos];     // t = *(uint64 *) (basep + 624 + pos)
    txaddy2 = t if eqf;
    t = [basep + 632 + pos];     // t = *(uint64 *) (basep + 632 + pos)
    txaddy3 = t if eqf;
    eqf = (u == 8);
    t = [basep + 672 + pos];     // t = *(uint64 *) (basep + 672 + pos)
    tysubx0 = t if eqf;
    t = [basep + 680 + pos];     // t = *(uint64 *) (basep + 680 + pos)
    tysubx1 = t if eqf;
    t = [basep + 688 + pos];     // t = *(uint64 *) (basep + 688 + pos)
    tysubx2 = t if eqf;
    t = [basep + 696 + pos];     // t = *(uint64 *) (basep + 696 + pos)
    tysubx3 = t if eqf;
    t = [basep + 704 + pos];     // t = *(uint64 *) (basep + 704 + pos)
    txaddy0 = t if eqf;
    t = [basep + 712 + pos];     // t = *(uint64 *) (basep + 712 + pos)
    txaddy1 = t if eqf;
    t = [basep + 720 + pos];     // t = *(uint64 *) (basep + 720 + pos)
    txaddy2 = t if eqf;
    t = [basep + 728 + pos];     // t = *(uint64 *) (basep + 728 + pos)
    txaddy3 = t if eqf;
    slf = (b <s 0);
    t = tysubx0;                // t = tysubx0
    tysubx0 = txaddy0 if slf;   // tysubx0 = txaddy0 if signed<
    txaddy0 = t if slf;         // txaddy0 = t if signed<
    t = tysubx1;                // t = tysubx1
    tysubx1 = txaddy1 if slf;   // tysubx1 = txaddy1 if signed<
    txaddy1 = t if slf;         // txaddy1 = t if signed<
    t = tysubx2;                // t = tysubx2
    tysubx2 = txaddy2 if slf;   // tysubx2 = txaddy2 if signed<
    txaddy2 = t if slf;         // txaddy2 = t if signed<
    t = tysubx3;                // t = tysubx3
    tysubx3 = txaddy3 if slf;   // tysubx3 = txaddy3 if signed<
    txaddy3 = t if slf;         // txaddy3 = t if signed<
    tp = tp_stack;              // tp = tp_stack
    [tp + 0*8] = tysubx0;     // *(uint64 *) (tp + 0) = tysubx0
    [tp + 1*8] = tysubx1;     // *(uint64 *) (tp + 8) = tysubx1
    [tp + 2*8] = tysubx2;     // *(uint64 *) (tp + 16) = tysubx2
    [tp + 3*8] = tysubx3;     // *(uint64 *) (tp + 24) = tysubx3
    [tp + 4*8] = txaddy0;     // *(uint64 *) (tp + 32) = txaddy0
    [tp + 5*8] = txaddy1;     // *(uint64 *) (tp + 40) = txaddy1
    [tp + 6*8] = txaddy2;     // *(uint64 *) (tp + 48) = txaddy2
    [tp + 7*8] = txaddy3;     // *(uint64 *) (tp + 56) = txaddy3
    tt2d0 = 0;                  // tt2d0 = 0
    tt2d1 = 0;                  // tt2d1 = 0
    tt2d2 = 0;                  // tt2d2 = 0
    tt2d3 = 0;                  // tt2d3 = 0
    eqf = (u == 1);
    t = [basep + 64 + pos];      // t = *(uint64 *) (basep + 64 + pos)
    tt2d0 = t if eqf;
    t = [basep + 72 + pos];      // t = *(uint64 *) (basep + 72 + pos)
    tt2d1 = t if eqf;
    t = [basep + 80 + pos];      // t = *(uint64 *) (basep + 80 + pos)
    tt2d2 = t if eqf;
    t = [basep + 88 + pos];      // t = *(uint64 *) (basep + 88 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 2);
    t = [basep + 160 + pos];     // t = *(uint64 *) (basep + 160 + pos)
    tt2d0 = t if eqf;
    t = [basep + 168 + pos];     // t = *(uint64 *) (basep + 168 + pos)
    tt2d1 = t if eqf;
    t = [basep + 176 + pos];     // t = *(uint64 *) (basep + 176 + pos)
    tt2d2 = t if eqf;
    t = [basep + 184 + pos];     // t = *(uint64 *) (basep + 184 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 3);
    t = [basep + 256 + pos];     // t = *(uint64 *) (basep + 256 + pos)
    tt2d0 = t if eqf;
    t = [basep + 264 + pos];     // t = *(uint64 *) (basep + 264 + pos)
    tt2d1 = t if eqf;
    t = [basep + 272 + pos];     // t = *(uint64 *) (basep + 272 + pos)
    tt2d2 = t if eqf;
    t = [basep + 280 + pos];     // t = *(uint64 *) (basep + 280 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 4);
    t = [basep + 352 + pos];     // t = *(uint64 *) (basep + 352 + pos)
    tt2d0 = t if eqf;
    t = [basep + 360 + pos];     // t = *(uint64 *) (basep + 360 + pos)
    tt2d1 = t if eqf;
    t = [basep + 368 + pos];     // t = *(uint64 *) (basep + 368 + pos)
    tt2d2 = t if eqf;
    t = [basep + 376 + pos];     // t = *(uint64 *) (basep + 376 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 5);
    t = [basep + 448 + pos];     // t = *(uint64 *) (basep + 448 + pos)
    tt2d0 = t if eqf;
    t = [basep + 456 + pos];     // t = *(uint64 *) (basep + 456 + pos)
    tt2d1 = t if eqf;
    t = [basep + 464 + pos];     // t = *(uint64 *) (basep + 464 + pos)
    tt2d2 = t if eqf;
    t = [basep + 472 + pos];     // t = *(uint64 *) (basep + 472 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 6);
    t = [basep + 544 + pos];     // t = *(uint64 *) (basep + 544 + pos)
    tt2d0 = t if eqf;
    t = [basep + 552 + pos];     // t = *(uint64 *) (basep + 552 + pos)
    tt2d1 = t if eqf;
    t = [basep + 560 + pos];     // t = *(uint64 *) (basep + 560 + pos)
    tt2d2 = t if eqf;
    t = [basep + 568 + pos];     // t = *(uint64 *) (basep + 568 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 7);
    t = [basep + 640 + pos];     // t = *(uint64 *) (basep + 640 + pos)
    tt2d0 = t if eqf;
    t = [basep + 648 + pos];     // t = *(uint64 *) (basep + 648 + pos)
    tt2d1 = t if eqf;
    t = [basep + 656 + pos];     // t = *(uint64 *) (basep + 656 + pos)
    tt2d2 = t if eqf;
    t = [basep + 664 + pos];     // t = *(uint64 *) (basep + 664 + pos)
    tt2d3 = t if eqf;
    eqf = (u == 8);
    t = [basep + 736 + pos];     // t = *(uint64 *) (basep + 736 + pos)
    tt2d0 = t if eqf;
    t = [basep + 744 + pos];     // t = *(uint64 *) (basep + 744 + pos)
    tt2d1 = t if eqf;
    t = [basep + 752 + pos];     // t = *(uint64 *) (basep + 752 + pos)
    tt2d2 = t if eqf;
    t = [basep + 760 + pos];     // t = *(uint64 *) (basep + 760 + pos)
    tt2d3 = t if eqf;
    tt0 = 0;                    // tt0 = 0
    tt1 = 0;                    // tt1 = 0
    tt2 = 0;                    // tt2 = 0
    tt3 = 0;                    // tt3 = 0
    cf, tt0 -= tt2d0;           // cf? tt0 -= tt2d0
    cf, tt1 -= tt2d1 - cf;      // cf? tt1 -= tt2d1 - cf; 
    cf, tt2 -= tt2d2 - cf;      // cf? tt2 -= tt2d2 - cf; 
    cf, tt3 -= tt2d3 - cf;      // cf? tt3 -= tt2d3 - cf; 
    subt0 = 0;                  // subt0 = 0
    subt1 = 38;                 // subt1 = 38
    subt1 = subt0 if !cf;       // subt1 = subt0 if !carry; 
    cf, tt0 -= subt1;           // cf? tt0 -= subt1
    cf, tt1 -= subt0 - cf;      // cf? tt1 -= subt0 - cf; 
    cf, tt2 -= subt0 - cf;      // cf? tt2 -= subt0 - cf; 
    cf, tt3 -= subt0 - cf;      // cf? tt3 -= subt0 - cf; 
    subt0 = subt1 if cf;        // subt0 = subt1 if carry; 
    tt0 -= subt0;               // tt0 -= subt0
    slf = (b <s 0);
    tt2d0 = tt0 if slf;         // tt2d0 = tt0 if signed<
    tt2d1 = tt1 if slf;         // tt2d1 = tt1 if signed<
    tt2d2 = tt2 if slf;         // tt2d2 = tt2 if signed<
    tt2d3 = tt3 if slf;         // tt2d3 = tt3 if signed<
    [tp + 8*8] = tt2d0;       // *(uint64 *) (tp + 64) = tt2d0
    [tp + 9*8] = tt2d1;       // *(uint64 *) (tp + 72) = tt2d1
    [tp + 10*8] = tt2d2;      // *(uint64 *) (tp + 80) = tt2d2
    [tp + 11*8] = tt2d3;      // *(uint64 *) (tp + 88) = tt2d3
    return;
}
