param int crypto_sign_ed25519_amd64_64_38 = 38;
export fn crypto_sign_ed25519_amd64_64_fe25519_square(reg u64 rp, reg u64 xp){
	 reg bool cf;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
	 reg u64 squarer4;
	 reg u64 squarer5;
	 reg u64 squarer6;
	 reg u64 squarer7;
	 reg u64 squarer8;
	 reg u64 squarerax;
	 reg u64 squarerdx;
	 reg u64 squaret1;
	 reg u64 squaret2;
	 reg u64 squaret3;
	 reg u64 squarezero;

	squarer7 = 0;  //squarer7 = 0
	squarerax = [xp + 1*8];  //squarerax = *(uint64 *) (xp + 8)
	squarerdx, squarerax = squarerax * [xp + 0*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 0);
	r1 = squarerax;  //r1 = squarerax
	r2 = squarerdx;  //r2 = squarerdx
	squarerax = [xp + 2*8];  //squarerax = *(uint64 *) (xp + 16)
	squarerdx, squarerax = squarerax * [xp + 1*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 8);
	r3 = squarerax;  //r3 = squarerax
	squarer4 = squarerdx;  //squarer4 = squarerdx
	squarerax = [xp + 3*8];  //squarerax = *(uint64 *) (xp + 24)
	squarerdx, squarerax = squarerax * [xp + 2*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 16);
	squarer5 = squarerax;  //squarer5 = squarerax
	squarer6 = squarerdx;  //squarer6 = squarerdx
	squarerax = [xp + 2*8];  //squarerax = *(uint64 *) (xp + 16)
	squarerdx, squarerax = squarerax * [xp + 0*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 0);
	cf, r2 += squarerax;  //cf? r2 += squarerax
	cf, r3 += squarerdx + cf;  //cf? r3 += squarerdx + cf; 
	_, squarer4 += 0 + cf;  // squarer4 += 0 + cf; 
	squarerax = [xp + 3*8];  //squarerax = *(uint64 *) (xp + 24)
	squarerdx, squarerax = squarerax * [xp + 1*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 8);
	cf, squarer4 += squarerax;  //cf? squarer4 += squarerax
	cf, squarer5 += squarerdx + cf;  //cf? squarer5 += squarerdx + cf; 
	_, squarer6 += 0 + cf;  // squarer6 += 0 + cf; 
	squarerax = [xp + 3*8];  //squarerax = *(uint64 *) (xp + 24)
	squarerdx, squarerax = squarerax * [xp + 0*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 0);
	cf, r3 += squarerax;  //cf? r3 += squarerax
	cf, squarer4 += squarerdx + cf;  //cf? squarer4 += squarerdx + cf; 
	cf, squarer5 += 0 + cf;  //cf? squarer5 += 0 + cf; 
	cf, squarer6 += 0 + cf;  //cf? squarer6 += 0 + cf; 
	_, squarer7 += 0 + cf;  // squarer7 += 0 + cf; 
	cf, r1 += r1;  //cf? r1 += r1
	cf, r2 += r2 + cf;  //cf? r2 += r2 + cf; 
	cf, r3 += r3 + cf;  //cf? r3 += r3 + cf; 
	cf, squarer4 += squarer4 + cf;  //cf? squarer4 += squarer4 + cf; 
	cf, squarer5 += squarer5 + cf;  //cf? squarer5 += squarer5 + cf; 
	cf, squarer6 += squarer6 + cf;  //cf? squarer6 += squarer6 + cf; 
	_, squarer7 += squarer7 + cf;  //squarer7 += squarer7 + cf; 
	squarerax = [xp + 0*8];  //squarerax = *(uint64 *) (xp + 0)
	squarerdx, squarerax = squarerax * [xp + 0*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 0);
	r0 = squarerax;  //r0 = squarerax
	squaret1 = squarerdx;  //squaret1 = squarerdx
	squarerax = [xp + 1*8];  //squarerax = *(uint64 *) (xp + 8)
	squarerdx, squarerax = squarerax * [xp + 1*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 8);
	squaret2 = squarerax;  //squaret2 = squarerax
	squaret3 = squarerdx;  //squaret3 = squarerdx
	squarerax = [xp + 2*8];  //squarerax = *(uint64 *) (xp + 16)
	squarerdx, squarerax = squarerax * [xp + 2*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 16);
	cf, r1 += squaret1;  //cf? r1 += squaret1
	cf, r2 += squaret2 + cf;  //cf? r2 += squaret2 + cf; 
	cf, r3 += squaret3 + cf;  //cf? r3 += squaret3 + cf; 
	cf, squarer4 += squarerax + cf;  //cf? squarer4 += squarerax + cf; 
	cf, squarer5 += squarerdx + cf;  //cf? squarer5 += squarerdx + cf; 
	cf, squarer6 += 0 + cf;  //cf? squarer6 += 0 + cf; 
	_, squarer7 += 0 + cf;  // squarer7 += 0 + cf; 
	squarerax = [xp + 3*8];  //squarerax = *(uint64 *) (xp + 24)
	squarerdx, squarerax = squarerax * [xp + 3*8];  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) (xp + 24);
	cf, squarer6 += squarerax;  //cf? squarer6 += squarerax
	_, squarer7 += squarerdx + cf;  //squarer7 += squarerdx + cf; 
	squarerax = squarer4;  //squarerax = squarer4
	squarerdx, squarerax = squarerax * crypto_sign_ed25519_amd64_64_38;  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	squarer4 = squarerax;  //squarer4 = squarerax
	squarerax = squarer5;  //squarerax = squarer5
	squarer5 = squarerdx;  //squarer5 = squarerdx
	squarerdx, squarerax = squarerax * crypto_sign_ed25519_amd64_64_38;  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, squarer5 += squarerax;  //cf? squarer5 += squarerax
	squarerax = squarer6;  //squarerax = squarer6
	squarer6 = 0;  //squarer6 = 0
	_, squarer6 += squarerdx + cf;  //squarer6 += squarerdx + cf; 
	squarerdx, squarerax = squarerax * crypto_sign_ed25519_amd64_64_38;  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, squarer6 += squarerax;  //cf? squarer6 += squarerax
	squarerax = squarer7;  //squarerax = squarer7
	squarer7 = 0;  //squarer7 = 0
	_, squarer7 += squarerdx + cf;  //squarer7 += squarerdx + cf; 
	squarerdx, squarerax = squarerax * crypto_sign_ed25519_amd64_64_38;  //(uint128) squarerdx squarerax = squarerax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, squarer7 += squarerax;  //cf? squarer7 += squarerax
	squarer8 = 0;  //squarer8 = 0
	_, squarer8 += squarerdx + cf;  //squarer8 += squarerdx + cf; 
	cf, r0 += squarer4;  //cf? r0 += squarer4
	cf, r1 += squarer5 + cf;  //cf? r1 += squarer5 + cf; 
	cf, r2 += squarer6 + cf;  //cf? r2 += squarer6 + cf; 
	cf, r3 += squarer7 + cf;  //cf? r3 += squarer7 + cf; 
	squarezero = 0;  //squarezero = 0
	_, squarer8 += squarezero + cf;  //squarer8 += squarezero + cf; 
	squarer8 *= 38;  //squarer8 *= 38
	cf, r0 += squarer8;  //cf? r0 += squarer8
	cf, r1 += squarezero + cf;  //cf? r1 += squarezero + cf; 
	cf, r2 += squarezero + cf;  //cf? r2 += squarezero + cf; 
	cf, r3 += squarezero + cf;  //cf? r3 += squarezero + cf; 
	_, squarezero += squarezero + cf;  //squarezero += squarezero + cf; 
	squarezero *= 38;  //squarezero *= 38
	r0 += squarezero;  //r0 += squarezero
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	return;
}


