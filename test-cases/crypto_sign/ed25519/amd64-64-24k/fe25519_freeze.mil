export fn crypto_sign_ed25519_amd64_64_fe25519_freeze(reg u64 rp){
	 reg bool cf;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
	 reg u64 t0;
	 reg u64 t1;
	 reg u64 t2;
	 reg u64 t3;
	 reg u64 two63;

	r0 = [rp + 0*8];  //r0 = *(uint64 *) (rp + 0)
	r1 = [rp + 1*8];  //r1 = *(uint64 *) (rp + 8)
	r2 = [rp + 2*8];  //r2 = *(uint64 *) (rp + 16)
	r3 = [rp + 3*8];  //r3 = *(uint64 *) (rp + 24)
	t0 = r0;  //t0 = r0
	t1 = r1;  //t1 = r1
	t2 = r2;  //t2 = r2
	t3 = r3;  //t3 = r3
	two63 = 1;  //two63 = 1
	two63 <<= 63;  //two63 <<= 63
	cf, t0 += 19;  //cf? t0 += 19
	cf, t1 += 0 + cf;  //cf? t1 += 0 + cf; 
	cf, t2 += 0 + cf;  //cf? t2 += 0 + cf; 
	cf, t3 += two63 + cf;  //cf? t3 += two63 + cf; 
	r0 = t0 if cf;  //r0 = t0 if carry; 
	r1 = t1 if cf;  //r1 = t1 if carry; 
	r2 = t2 if cf;  //r2 = t2 if carry; 
	r3 = t3 if cf;  //r3 = t3 if carry; 
	t0 = r0;  //t0 = r0
	t1 = r1;  //t1 = r1
	t2 = r2;  //t2 = r2
	t3 = r3;  //t3 = r3
	cf, t0 += 19;  //cf? t0 += 19
	cf, t1 += 0 + cf;  //cf? t1 += 0 + cf; 
	cf, t2 += 0 + cf;  //cf? t2 += 0 + cf; 
	cf, t3 += two63 + cf;  //cf? t3 += two63 + cf; 
	r0 = t0 if cf;  //r0 = t0 if carry; 
	r1 = t1 if cf;  //r1 = t1 if carry; 
	r2 = t2 if cf;  //r2 = t2 if carry; 
	r3 = t3 if cf;  //r3 = t3 if carry; 
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	return;
}


