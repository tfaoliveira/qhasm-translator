param int crypto_sign_ed25519_amd64_64_38 = 38;
export fn crypto_sign_ed25519_amd64_64_ge25519_p1p1_to_p3(reg u64 rp, reg u64 pp){
	 reg bool cf;
	 reg u64 mulc;
	 reg u64 mulr4;
	 reg u64 mulr5;
	 reg u64 mulr6;
	 reg u64 mulr7;
	 reg u64 mulr8;
	 reg u64 mulrax;
	 reg u64 mulrdx;
	 reg u64 mulx0;
	 reg u64 mulx1;
	 reg u64 mulx2;
	 reg u64 mulx3;
	 reg u64 mulzero;
	 reg u64 rt0;
	 reg u64 rt1;
	 reg u64 rt2;
	 reg u64 rt3;
	 reg u64 rx0;
	 reg u64 rx1;
	 reg u64 rx2;
	 reg u64 rx3;
	 reg u64 ry0;
	 reg u64 ry1;
	 reg u64 ry2;
	 reg u64 ry3;
	 reg u64 rz0;
	 reg u64 rz1;
	 reg u64 rz2;
	 reg u64 rz3;

	mulr4 = 0;  //mulr4 = 0
	mulr5 = 0;  //mulr5 = 0
	mulr6 = 0;  //mulr6 = 0
	mulr7 = 0;  //mulr7 = 0
	mulx0 = [pp + 0*8];  //mulx0 = *(uint64 *) (pp + 0)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	rx0 = mulrax;  //rx0 = mulrax
	rx1 = mulrdx;  //rx1 = mulrdx
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rx1 += mulrax;  //cf? rx1 += mulrax
	rx2 = 0;  //rx2 = 0
	_, rx2 += mulrdx + cf;  //rx2 += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rx2 += mulrax;  //cf? rx2 += mulrax
	rx3 = 0;  //rx3 = 0
	_, rx3 += mulrdx + cf;  //rx3 += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rx3 += mulrax;  //cf? rx3 += mulrax
	_, mulr4 += mulrdx + cf;  //mulr4 += mulrdx + cf; 
	mulx1 = [pp + 1*8];  //mulx1 = *(uint64 *) (pp + 8)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rx1 += mulrax;  //cf? rx1 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rx2 += mulrax;  //cf? rx2 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rx2 += mulc;  //cf? rx2 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rx3 += mulrax;  //cf? rx3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rx3 += mulc;  //cf? rx3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	_, mulr5 += mulrdx + cf;  //mulr5 += mulrdx + cf; 
	mulx2 = [pp + 2*8];  //mulx2 = *(uint64 *) (pp + 16)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rx2 += mulrax;  //cf? rx2 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rx3 += mulrax;  //cf? rx3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rx3 += mulc;  //cf? rx3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulx3 = [pp + 3*8];  //mulx3 = *(uint64 *) (pp + 24)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, rx3 += mulrax;  //cf? rx3 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr6 += mulc;  //cf? mulr6 += mulc
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrax = mulr4;  //mulrax = mulr4
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	mulr4 = mulrax;  //mulr4 = mulrax
	mulrax = mulr5;  //mulrax = mulr5
	mulr5 = mulrdx;  //mulr5 = mulrdx
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	mulrax = mulr6;  //mulrax = mulr6
	mulr6 = 0;  //mulr6 = 0
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	mulrax = mulr7;  //mulrax = mulr7
	mulr7 = 0;  //mulr7 = 0
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr7 += mulrax;  //cf? mulr7 += mulrax
	mulr8 = 0;  //mulr8 = 0
	_, mulr8 += mulrdx + cf;  //mulr8 += mulrdx + cf; 
	cf, rx0 += mulr4;  //cf? rx0 += mulr4
	cf, rx1 += mulr5 + cf;  //cf? rx1 += mulr5 + cf; 
	cf, rx2 += mulr6 + cf;  //cf? rx2 += mulr6 + cf; 
	cf, rx3 += mulr7 + cf;  //cf? rx3 += mulr7 + cf; 
	mulzero = 0;  //mulzero = 0
	_, mulr8 += mulzero + cf;  //mulr8 += mulzero + cf; 
	mulr8 *= 38;  //mulr8 *= 38
	cf, rx0 += mulr8;  //cf? rx0 += mulr8
	cf, rx1 += mulzero + cf;  //cf? rx1 += mulzero + cf; 
	cf, rx2 += mulzero + cf;  //cf? rx2 += mulzero + cf; 
	cf, rx3 += mulzero + cf;  //cf? rx3 += mulzero + cf; 
	_, mulzero += mulzero + cf;  //mulzero += mulzero + cf; 
	mulzero *= 38;  //mulzero *= 38
	rx0 += mulzero;  //rx0 += mulzero
	[rp + 0*8] = rx0;  //*(uint64 *) (rp + 0) = rx0
	[rp + 1*8] = rx1;  //*(uint64 *) (rp + 8) = rx1
	[rp + 2*8] = rx2;  //*(uint64 *) (rp + 16) = rx2
	[rp + 3*8] = rx3;  //*(uint64 *) (rp + 24) = rx3
	mulr4 = 0;  //mulr4 = 0
	mulr5 = 0;  //mulr5 = 0
	mulr6 = 0;  //mulr6 = 0
	mulr7 = 0;  //mulr7 = 0
	mulx0 = [pp + 8*8];  //mulx0 = *(uint64 *) (pp + 64)
	mulrax = [pp + 4*8];  //mulrax = *(uint64 *) (pp + 32)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	ry0 = mulrax;  //ry0 = mulrax
	ry1 = mulrdx;  //ry1 = mulrdx
	mulrax = [pp + 5*8];  //mulrax = *(uint64 *) (pp + 40)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, ry1 += mulrax;  //cf? ry1 += mulrax
	ry2 = 0;  //ry2 = 0
	_, ry2 += mulrdx + cf;  //ry2 += mulrdx + cf; 
	mulrax = [pp + 6*8];  //mulrax = *(uint64 *) (pp + 48)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, ry2 += mulrax;  //cf? ry2 += mulrax
	ry3 = 0;  //ry3 = 0
	_, ry3 += mulrdx + cf;  //ry3 += mulrdx + cf; 
	mulrax = [pp + 7*8];  //mulrax = *(uint64 *) (pp + 56)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, ry3 += mulrax;  //cf? ry3 += mulrax
	_, mulr4 += mulrdx + cf;  //mulr4 += mulrdx + cf; 
	mulx1 = [pp + 9*8];  //mulx1 = *(uint64 *) (pp + 72)
	mulrax = [pp + 4*8];  //mulrax = *(uint64 *) (pp + 32)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, ry1 += mulrax;  //cf? ry1 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 5*8];  //mulrax = *(uint64 *) (pp + 40)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, ry2 += mulrax;  //cf? ry2 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, ry2 += mulc;  //cf? ry2 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 6*8];  //mulrax = *(uint64 *) (pp + 48)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, ry3 += mulrax;  //cf? ry3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, ry3 += mulc;  //cf? ry3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 7*8];  //mulrax = *(uint64 *) (pp + 56)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	_, mulr5 += mulrdx + cf;  //mulr5 += mulrdx + cf; 
	mulx2 = [pp + 10*8];  //mulx2 = *(uint64 *) (pp + 80)
	mulrax = [pp + 4*8];  //mulrax = *(uint64 *) (pp + 32)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, ry2 += mulrax;  //cf? ry2 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 5*8];  //mulrax = *(uint64 *) (pp + 40)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, ry3 += mulrax;  //cf? ry3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, ry3 += mulc;  //cf? ry3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 6*8];  //mulrax = *(uint64 *) (pp + 48)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 7*8];  //mulrax = *(uint64 *) (pp + 56)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulx3 = [pp + 11*8];  //mulx3 = *(uint64 *) (pp + 88)
	mulrax = [pp + 4*8];  //mulrax = *(uint64 *) (pp + 32)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, ry3 += mulrax;  //cf? ry3 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 5*8];  //mulrax = *(uint64 *) (pp + 40)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 6*8];  //mulrax = *(uint64 *) (pp + 48)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 7*8];  //mulrax = *(uint64 *) (pp + 56)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr6 += mulc;  //cf? mulr6 += mulc
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrax = mulr4;  //mulrax = mulr4
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	mulr4 = mulrax;  //mulr4 = mulrax
	mulrax = mulr5;  //mulrax = mulr5
	mulr5 = mulrdx;  //mulr5 = mulrdx
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	mulrax = mulr6;  //mulrax = mulr6
	mulr6 = 0;  //mulr6 = 0
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	mulrax = mulr7;  //mulrax = mulr7
	mulr7 = 0;  //mulr7 = 0
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr7 += mulrax;  //cf? mulr7 += mulrax
	mulr8 = 0;  //mulr8 = 0
	_, mulr8 += mulrdx + cf;  //mulr8 += mulrdx + cf; 
	cf, ry0 += mulr4;  //cf? ry0 += mulr4
	cf, ry1 += mulr5 + cf;  //cf? ry1 += mulr5 + cf; 
	cf, ry2 += mulr6 + cf;  //cf? ry2 += mulr6 + cf; 
	cf, ry3 += mulr7 + cf;  //cf? ry3 += mulr7 + cf; 
	mulzero = 0;  //mulzero = 0
	_, mulr8 += mulzero + cf;  //mulr8 += mulzero + cf; 
	mulr8 *= 38;  //mulr8 *= 38
	cf, ry0 += mulr8;  //cf? ry0 += mulr8
	cf, ry1 += mulzero + cf;  //cf? ry1 += mulzero + cf; 
	cf, ry2 += mulzero + cf;  //cf? ry2 += mulzero + cf; 
	cf, ry3 += mulzero + cf;  //cf? ry3 += mulzero + cf; 
	_, mulzero += mulzero + cf;  //mulzero += mulzero + cf; 
	mulzero *= 38;  //mulzero *= 38
	ry0 += mulzero;  //ry0 += mulzero
	[rp + 4*8] = ry0;  //*(uint64 *) (rp + 32) = ry0
	[rp + 5*8] = ry1;  //*(uint64 *) (rp + 40) = ry1
	[rp + 6*8] = ry2;  //*(uint64 *) (rp + 48) = ry2
	[rp + 7*8] = ry3;  //*(uint64 *) (rp + 56) = ry3
	mulr4 = 0;  //mulr4 = 0
	mulr5 = 0;  //mulr5 = 0
	mulr6 = 0;  //mulr6 = 0
	mulr7 = 0;  //mulr7 = 0
	mulx0 = [pp + 4*8];  //mulx0 = *(uint64 *) (pp + 32)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	rz0 = mulrax;  //rz0 = mulrax
	rz1 = mulrdx;  //rz1 = mulrdx
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rz1 += mulrax;  //cf? rz1 += mulrax
	rz2 = 0;  //rz2 = 0
	_, rz2 += mulrdx + cf;  //rz2 += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rz2 += mulrax;  //cf? rz2 += mulrax
	rz3 = 0;  //rz3 = 0
	_, rz3 += mulrdx + cf;  //rz3 += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rz3 += mulrax;  //cf? rz3 += mulrax
	_, mulr4 += mulrdx + cf;  //mulr4 += mulrdx + cf; 
	mulx1 = [pp + 5*8];  //mulx1 = *(uint64 *) (pp + 40)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rz1 += mulrax;  //cf? rz1 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rz2 += mulrax;  //cf? rz2 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rz2 += mulc;  //cf? rz2 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rz3 += mulrax;  //cf? rz3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rz3 += mulc;  //cf? rz3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	_, mulr5 += mulrdx + cf;  //mulr5 += mulrdx + cf; 
	mulx2 = [pp + 6*8];  //mulx2 = *(uint64 *) (pp + 48)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rz2 += mulrax;  //cf? rz2 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rz3 += mulrax;  //cf? rz3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rz3 += mulc;  //cf? rz3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulx3 = [pp + 7*8];  //mulx3 = *(uint64 *) (pp + 56)
	mulrax = [pp + 12*8];  //mulrax = *(uint64 *) (pp + 96)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, rz3 += mulrax;  //cf? rz3 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 13*8];  //mulrax = *(uint64 *) (pp + 104)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 14*8];  //mulrax = *(uint64 *) (pp + 112)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 15*8];  //mulrax = *(uint64 *) (pp + 120)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr6 += mulc;  //cf? mulr6 += mulc
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrax = mulr4;  //mulrax = mulr4
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	mulr4 = mulrax;  //mulr4 = mulrax
	mulrax = mulr5;  //mulrax = mulr5
	mulr5 = mulrdx;  //mulr5 = mulrdx
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	mulrax = mulr6;  //mulrax = mulr6
	mulr6 = 0;  //mulr6 = 0
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	mulrax = mulr7;  //mulrax = mulr7
	mulr7 = 0;  //mulr7 = 0
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr7 += mulrax;  //cf? mulr7 += mulrax
	mulr8 = 0;  //mulr8 = 0
	_, mulr8 += mulrdx + cf;  //mulr8 += mulrdx + cf; 
	cf, rz0 += mulr4;  //cf? rz0 += mulr4
	cf, rz1 += mulr5 + cf;  //cf? rz1 += mulr5 + cf; 
	cf, rz2 += mulr6 + cf;  //cf? rz2 += mulr6 + cf; 
	cf, rz3 += mulr7 + cf;  //cf? rz3 += mulr7 + cf; 
	mulzero = 0;  //mulzero = 0
	_, mulr8 += mulzero + cf;  //mulr8 += mulzero + cf; 
	mulr8 *= 38;  //mulr8 *= 38
	cf, rz0 += mulr8;  //cf? rz0 += mulr8
	cf, rz1 += mulzero + cf;  //cf? rz1 += mulzero + cf; 
	cf, rz2 += mulzero + cf;  //cf? rz2 += mulzero + cf; 
	cf, rz3 += mulzero + cf;  //cf? rz3 += mulzero + cf; 
	_, mulzero += mulzero + cf;  //mulzero += mulzero + cf; 
	mulzero *= 38;  //mulzero *= 38
	rz0 += mulzero;  //rz0 += mulzero
	[rp + 8*8] = rz0;  //*(uint64 *) (rp + 64) = rz0
	[rp + 9*8] = rz1;  //*(uint64 *) (rp + 72) = rz1
	[rp + 10*8] = rz2;  //*(uint64 *) (rp + 80) = rz2
	[rp + 11*8] = rz3;  //*(uint64 *) (rp + 88) = rz3
	mulr4 = 0;  //mulr4 = 0
	mulr5 = 0;  //mulr5 = 0
	mulr6 = 0;  //mulr6 = 0
	mulr7 = 0;  //mulr7 = 0
	mulx0 = [pp + 0*8];  //mulx0 = *(uint64 *) (pp + 0)
	mulrax = [pp + 8*8];  //mulrax = *(uint64 *) (pp + 64)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	rt0 = mulrax;  //rt0 = mulrax
	rt1 = mulrdx;  //rt1 = mulrdx
	mulrax = [pp + 9*8];  //mulrax = *(uint64 *) (pp + 72)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rt1 += mulrax;  //cf? rt1 += mulrax
	rt2 = 0;  //rt2 = 0
	_, rt2 += mulrdx + cf;  //rt2 += mulrdx + cf; 
	mulrax = [pp + 10*8];  //mulrax = *(uint64 *) (pp + 80)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rt2 += mulrax;  //cf? rt2 += mulrax
	rt3 = 0;  //rt3 = 0
	_, rt3 += mulrdx + cf;  //rt3 += mulrdx + cf; 
	mulrax = [pp + 11*8];  //mulrax = *(uint64 *) (pp + 88)
	mulrdx, mulrax = mulrax * mulx0;  //(uint128) mulrdx mulrax = mulrax * mulx0
	cf, rt3 += mulrax;  //cf? rt3 += mulrax
	_, mulr4 += mulrdx + cf;  //mulr4 += mulrdx + cf; 
	mulx1 = [pp + 1*8];  //mulx1 = *(uint64 *) (pp + 8)
	mulrax = [pp + 8*8];  //mulrax = *(uint64 *) (pp + 64)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rt1 += mulrax;  //cf? rt1 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 9*8];  //mulrax = *(uint64 *) (pp + 72)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rt2 += mulrax;  //cf? rt2 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rt2 += mulc;  //cf? rt2 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 10*8];  //mulrax = *(uint64 *) (pp + 80)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, rt3 += mulrax;  //cf? rt3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rt3 += mulc;  //cf? rt3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 11*8];  //mulrax = *(uint64 *) (pp + 88)
	mulrdx, mulrax = mulrax * mulx1;  //(uint128) mulrdx mulrax = mulrax * mulx1
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	_, mulr5 += mulrdx + cf;  //mulr5 += mulrdx + cf; 
	mulx2 = [pp + 2*8];  //mulx2 = *(uint64 *) (pp + 16)
	mulrax = [pp + 8*8];  //mulrax = *(uint64 *) (pp + 64)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rt2 += mulrax;  //cf? rt2 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 9*8];  //mulrax = *(uint64 *) (pp + 72)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, rt3 += mulrax;  //cf? rt3 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, rt3 += mulc;  //cf? rt3 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 10*8];  //mulrax = *(uint64 *) (pp + 80)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 11*8];  //mulrax = *(uint64 *) (pp + 88)
	mulrdx, mulrax = mulrax * mulx2;  //(uint128) mulrdx mulrax = mulrax * mulx2
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulx3 = [pp + 3*8];  //mulx3 = *(uint64 *) (pp + 24)
	mulrax = [pp + 8*8];  //mulrax = *(uint64 *) (pp + 64)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, rt3 += mulrax;  //cf? rt3 += mulrax
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 9*8];  //mulrax = *(uint64 *) (pp + 72)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr4 += mulrax;  //cf? mulr4 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr4 += mulc;  //cf? mulr4 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 10*8];  //mulrax = *(uint64 *) (pp + 80)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr5 += mulc;  //cf? mulr5 += mulc
	mulc = 0;  //mulc = 0
	_, mulc += mulrdx + cf;  //mulc += mulrdx + cf; 
	mulrax = [pp + 11*8];  //mulrax = *(uint64 *) (pp + 88)
	mulrdx, mulrax = mulrax * mulx3;  //(uint128) mulrdx mulrax = mulrax * mulx3
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	_, mulrdx += 0 + cf;  // mulrdx += 0 + cf; 
	cf, mulr6 += mulc;  //cf? mulr6 += mulc
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrax = mulr4;  //mulrax = mulr4
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	mulr4 = mulrax;  //mulr4 = mulrax
	mulrax = mulr5;  //mulrax = mulr5
	mulr5 = mulrdx;  //mulr5 = mulrdx
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr5 += mulrax;  //cf? mulr5 += mulrax
	mulrax = mulr6;  //mulrax = mulr6
	mulr6 = 0;  //mulr6 = 0
	_, mulr6 += mulrdx + cf;  //mulr6 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr6 += mulrax;  //cf? mulr6 += mulrax
	mulrax = mulr7;  //mulrax = mulr7
	mulr7 = 0;  //mulr7 = 0
	_, mulr7 += mulrdx + cf;  //mulr7 += mulrdx + cf; 
	mulrdx, mulrax = mulrax * crypto_sign_ed25519_amd64_64_38;  //(uint128) mulrdx mulrax = mulrax * *(uint64 *) &crypto_sign_ed25519_amd64_64_38
	cf, mulr7 += mulrax;  //cf? mulr7 += mulrax
	mulr8 = 0;  //mulr8 = 0
	_, mulr8 += mulrdx + cf;  //mulr8 += mulrdx + cf; 
	cf, rt0 += mulr4;  //cf? rt0 += mulr4
	cf, rt1 += mulr5 + cf;  //cf? rt1 += mulr5 + cf; 
	cf, rt2 += mulr6 + cf;  //cf? rt2 += mulr6 + cf; 
	cf, rt3 += mulr7 + cf;  //cf? rt3 += mulr7 + cf; 
	mulzero = 0;  //mulzero = 0
	_, mulr8 += mulzero + cf;  //mulr8 += mulzero + cf; 
	mulr8 *= 38;  //mulr8 *= 38
	cf, rt0 += mulr8;  //cf? rt0 += mulr8
	cf, rt1 += mulzero + cf;  //cf? rt1 += mulzero + cf; 
	cf, rt2 += mulzero + cf;  //cf? rt2 += mulzero + cf; 
	cf, rt3 += mulzero + cf;  //cf? rt3 += mulzero + cf; 
	_, mulzero += mulzero + cf;  //mulzero += mulzero + cf; 
	mulzero *= 38;  //mulzero *= 38
	rt0 += mulzero;  //rt0 += mulzero
	[rp + 12*8] = rt0;  //*(uint64 *) (rp + 96) = rt0
	[rp + 13*8] = rt1;  //*(uint64 *) (rp + 104) = rt1
	[rp + 14*8] = rt2;  //*(uint64 *) (rp + 112) = rt2
	[rp + 15*8] = rt3;  //*(uint64 *) (rp + 120) = rt3
	return;
}


