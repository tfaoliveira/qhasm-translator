export fn crypto_sign_ed25519_amd64_64_fe25519_add(reg u64 rp, reg u64 xp, reg u64 yp){
	 reg u64 addt0;
	 reg u64 addt1;
	 reg bool cf;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;

	r0 = [xp + 0*8];  //r0 = *(uint64 *) (xp + 0)
	r1 = [xp + 1*8];  //r1 = *(uint64 *) (xp + 8)
	r2 = [xp + 2*8];  //r2 = *(uint64 *) (xp + 16)
	r3 = [xp + 3*8];  //r3 = *(uint64 *) (xp + 24)
	cf, r0 += [yp + 0*8];  //cf? r0 += *(uint64 *) (yp + 0)
	cf, r1 += [yp + 1*8] + cf;  //cf? r1 += *(uint64 *) (yp + 8) + cf;
	cf, r2 += [yp + 2*8] + cf;  //cf? r2 += *(uint64 *) (yp + 16) + cf;
	cf, r3 += [yp + 3*8] + cf;  //cf? r3 += *(uint64 *) (yp + 24) + cf;
	addt0 = 0;  //addt0 = 0
	addt1 = 38;  //addt1 = 38
	addt1 = addt0 if !cf;  //addt1 = addt0 if !carry; 
	cf, r0 += addt1;  //cf? r0 += addt1
	cf, r1 += addt0 + cf;  //cf? r1 += addt0 + cf; 
	cf, r2 += addt0 + cf;  //cf? r2 += addt0 + cf; 
	cf, r3 += addt0 + cf;  //cf? r3 += addt0 + cf; 
	addt0 = addt1 if cf;  //addt0 = addt1 if carry; 
	r0 += addt0;  //r0 += addt0
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	return;
}


