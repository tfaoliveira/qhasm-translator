export fn crypto_sign_ed25519_amd64_64_fe25519_sub(reg u64 rp, reg u64 xp, reg u64 yp){
	 reg bool cf;
	 reg u64 r0;
	 reg u64 r1;
	 reg u64 r2;
	 reg u64 r3;
	 reg u64 subt0;
	 reg u64 subt1;

	r0 = [xp + 0*8];  //r0 = *(uint64 *) (xp + 0)
	r1 = [xp + 1*8];  //r1 = *(uint64 *) (xp + 8)
	r2 = [xp + 2*8];  //r2 = *(uint64 *) (xp + 16)
	r3 = [xp + 3*8];  //r3 = *(uint64 *) (xp + 24)
	cf, r0 -= [yp + 0*8];  //cf? r0 -= *(uint64 *) (yp + 0)
	cf, r1 -= [yp + 1*8] - cf;  //cf? r1 -= *(uint64 *) (yp + 8) - cf; 
	cf, r2 -= [yp + 2*8] - cf;  //cf? r2 -= *(uint64 *) (yp + 16) - cf; 
	cf, r3 -= [yp + 3*8] - cf;  //cf? r3 -= *(uint64 *) (yp + 24) - cf; 
	subt0 = 0;  //subt0 = 0
	subt1 = 38;  //subt1 = 38
	subt1 = subt0 if !cf;  //subt1 = subt0 if !carry; 
	cf, r0 -= subt1;  //cf? r0 -= subt1
	cf, r1 -= subt0 - cf;  //cf? r1 -= subt0 - cf; 
	cf, r2 -= subt0 - cf;  //cf? r2 -= subt0 - cf; 
	cf, r3 -= subt0 - cf;  //cf? r3 -= subt0 - cf; 
	subt0 = subt1 if cf;  //subt0 = subt1 if carry; 
	r0 -= subt0;  //r0 -= subt0
	[rp + 0*8] = r0;  //*(uint64 *) (rp + 0) = r0
	[rp + 1*8] = r1;  //*(uint64 *) (rp + 8) = r1
	[rp + 2*8] = r2;  //*(uint64 *) (rp + 16) = r2
	[rp + 3*8] = r3;  //*(uint64 *) (rp + 24) = r3
	return;
}


