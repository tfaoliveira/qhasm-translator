# var1 = *(uint64 *) &global_var
inst: $r = *(uint64 *) &$n
in: int64 r, iv n
tr: $r = *(uint64_t *) $n;---$r:rui64;

inst: $r = $n
in: int64 r, ii n
tr: $r = $n;---$r:rui64;

inst: $r = $s
in: int64 r, stack64 s
tr: $r = $s;---$r:rui64;$s:ui64
tr: $r = $s;---$r:rui64p;$s:ui64p
tr: $r = $s;---$r:ruip;$s:uip
tr: $r = $s;---$r:rusp;$s:usp
tr: $r = $s;---$r:rucp;$s:ucp
tr: $r = $s;---$r:rvp;$s:vp

inst: $r = *(uint8 *)($s + $n)
in: int64 r, int64 s, ii n
tr: $r = $s[$p0];---$r:rui64;$s:rucp;---let $p0=$n/sizeof(char)
tr: $r = *(unsigned char *)($s + $n);---$r:rui64;$s:rvp;

inst: $r = *(uint64 *)($s + $n)
in: int64 r, int64 s, ii n
tr: $r = $s[$p0];---$r:rui64;$s:rui64p;---let $p0=$n/sizeof(uint64)
tr: $r = *(uint64_t *)($s + $n);---$r:rui;$s:rvp;

inst: $r = $s
in: stack64 r, int64 s
tr: $r = $s;---$r:ui64;$s:rui64
tr: $r = $s;---$r:ui64p;$s:rui64p
tr: $r = $s;---$r:uip;$s:ruip
tr: $r = $s;---$r:usp;$s:rusp
tr: $r = $s;---$r:ucp;$s:rucp
tr: $r = $s;---$r:vp;$s:rvp

inst: $r = $s
in: int64 r, int64 s
tr: $r = $s;---$r:rui64;$s:rui64
tr: $r = $s;---$r:rui64p;$s:rui64p
tr: $r = $s;---$r:ruip;$s:ruip
tr: $r = $s;---$r:rusp;$s:rusp
tr: $r = $s;---$r:rucp;$s:rucp
tr: $r = $s;---$r:rvp;$s:rvp
 
# typedef unsigned __int128 uint128; // this should be included : gcc specific
# (uint128) var1 var2 = var3 * *(uint64 *)(var4 + imm_offset)
#
inst: (uint128) $r $s = $t * *(uint64 *)($x + $n)
in: int64 r, int64 s, int64 t, int64 x, ii n
tr: multiply128($r, $s, $t, $x[$p0]);// $r, $s = $t * $x[$p0];---$r:rui64;$s:rui64;$t:rui64;$x:rui64p;---let $p0=$n/sizeof(uint64)
#tr: multiply128($r, $s, $t, $x[$p0]);---$r:rui64;$s:rui64;$t:rui64;$x:rui64p;---let $p0=$n/sizeof(uint64)
# tr: {uint128 _q_r_ = (uint128) $t * $x[$p0]; $r = _q_r_; $s = _q_r_ >> 64;}---$r:rui64;$s:rui64;$t:rui64;$x:rui64p;---let $p0=$n/sizeof(uint64)
# tr: {uint128 _q_r_ = (uint128) $t * *(uint64_t*)($x + $n); $r = _q_r_; $s = _q_r_ >> 64;}---$r:rui64;$s:rui64;$t:rui64;$x:rui64p;

# var1 = (var2.var3) << shift
inst: $r = ($s.$t) << $n
in: int64 r, int64 s, int64 t, ii n
tr: $r = rotate128($s,$t,$n);---$r:rui64;$s:rui64;$t:rui64;

# carry? var1 += var2
inst: carry? $r += $s
in: int64 r, int64 s
tr: $r = add64_and_set_carry($r,$s); // cf? $r += $s---$r:rui64;$s:rui64;

# var1 += var2 + carry
inst: $r += $s + carry
in: int64 r, int64 s
tr: $r = add64_with_carry($r,$s); // $r += $s + cf; ---$r:rui64;$s:rui64;

inst: *(uint64 *)($s + $n) = $r
in: int64 s, ii n, int64 r
tr: $s[$p0] = $r;---$s:rui64p;$r:rui64---let $p0=$n/sizeof(uint64)
tr: *(uint64_t *)($s + $n) = $r;---$s:rvp;$r:rui64

# var1 &= var2
inst: $r &= $s
in: int64 r, int64 s
tr: $r &= $s;---$r:rui64;$s:rui64;

# var1 += var2
inst: $r += $s
in: int64 r, int64 s
tr: $r += $s;---$r:rui64;$s:rui64;

#var1 = var2 * imm
inst: $r = $s * $n
in: int64 r, int64 s, ii n
tr: $r = $s * $n;---$r:rui64;$s:rui64;

#(uint64) var1 >>= shift
inst: (uint64) $r >>= $n
in: int64 r, ii n
tr: $r >>= $n;---$r:rui64;

inst: $r *= $n
in: int64 r, ii n
tr: $r *= $n;---$r:rui64

inst: $r -= $n
in: int64 r, ii n
tr: $r -= $n;---$r:rui64

inst: goto $f if $t
in: it f, flg t
tr: if($w $cnd $z){goto $f;}
ps: gotoif;$f;$t

inst: goto $f
in: it f
tr: goto $f;
ps: goto;$f

inst: $f:
in: it f
tr: $f:
ps: label;$f

