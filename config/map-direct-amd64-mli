inst: $r = *(uint64 *) &$n
in: int64 r, iv n
tr: $r = $n; ---$r:rui64mli;$n:ui64mli

inst: $r += *(uint64 *) &$n
in: int64 r, iv n
tr: $r += $n;---$r:rui64mli;$n:ui64mli

inst: $r = $n
in: int64 r, ii n
tr: $r = $n;---$r:rui64mli;

inst: $r = $s
in: int64 r, stack64 s
tr: $r = $s;---$r:rui64mli;$s:ui64mli
tr: $r = $s;---$r:rui64pmli;$s:ui64pmli
tr: $r = $s;---$r:ruip;$s:uip
tr: $r = $s;---$r:rusp;$s:usp
tr: $r = $s;---$r:rucp;$s:ucp
tr: $r = $s;---$r:rvp;$s:vp

inst: $r = *(uint8 *) ($s + $n)
in: int64 r, int64 s, ii n
tr: $r = $s[$p0];---$r:rui64mli;$s:rucp;---let $p0=$n/sizeof(char)
#tr: $r = *(unsigned char *)($s + $n);---$r:rui64mli;$s:rvp;

inst: $r = *(uint64 *) ($s + $n)
in: int64 r, int64 s, ii n
tr: $r = $s[$p0];---$r:rui64mli;$s:rui64pmli---let $p0=$n/sizeof(uint64)
#tr: $r = *(uint64_t *)($s + $n);---$r:rui;$s:rvp;

inst: $r += *(uint64 *) ($s + $n)
in: int64 r, int64 s, ii n
tr: $r += $s[$p0];---$r:rui64mli;$s:rui64pmli;---let $p0=$n/sizeof(uint64)
#tr: $r += *(uint64_t *) ($s + $n);---$r:rui;$s:rvp;

inst: $r -= *(uint64 *) ($s + $n)
in: int64 r, int64 s, ii n
tr: $r -= $s[$p0];---$r:rui64mli;$s:rui64pmli;---let $p0=$n/sizeof(uint64)
#tr: $r -= *(uint64_t *)($s + $n);---$r:rui;$s:rvp;

inst: $r = $s
in: stack64 r, int64 s
tr: $r = $s;---$r:ui64mli;$s:rui64mli
tr: $r = $s;---$r:ui64pmli;$s:rui64pmli
tr: $r = $s;---$r:uip;$s:ruip
tr: $r = $s;---$r:usp;$s:rusp
tr: $r = $s;---$r:ucp;$s:rucp
tr: $r = $s;---$r:vp;$s:rvp

inst: $r = $s
in: int64 r, int64 s
tr: $r = $s;---$r:rui64mli;$s:rui64mli
tr: $r = $s;---$r:rui64pmli;$s:rui64pmli
tr: $r = $s;---$r:ruip;$s:ruip
tr: $r = $s;---$r:rusp;$s:rusp
tr: $r = $s;---$r:rucp;$s:rucp
tr: $r = $s;---$r:rvp;$s:rvp
 
inst: (uint128) $r $s = $t * *(uint64 *)($x + $n)
in: int64 r, int64 s, int64 t, int64 x, ii n
tr: $r, $s = $t * $x[$p0];---$r:rui64mli;$s:rui64mli;$t:rui64mli;$x:rui64pmli;---let $p0=$n/sizeof(uint64)

inst: (uint128) $r $s = $t * $x
in: int64 r, int64 s, int64 t, int64 x
tr: $r, $s = $t * $x;---$r:rui64mli;$s:rui64mli;$t:rui64mli;$x:rui64mli;

inst: (uint128) $r $s = $t * $x
in: int64 r, int64 s, int64 t, stack64 x
tr: $r, $s = $t * $x;---$r:rui64mli;$s:rui64mli;$t:rui64mli;$x:ui64mli;

inst: (uint128) $r $s = $t * *(uint64 *) &$n
in: int64 r, int64 s, int64 t, iv n
tr: $r, $s = $t * $n;---$r:rui64mli;$s:rui64mli;$t:rui64mli;$n:ui64mli;

inst: $r = ($s.$t) << $n
in: int64 r, int64 s, int64 t, ii n
tr: $r = ($s, $t) << $n;---$r:rui64mli;$s:rui64mli;$t:rui64mli;

inst: $r <<= $n
in: int64 r, ii n
tr: $r <<= $n;---$r:rui64mli;

inst: carry? $r += $s
in: int64 r, int64 s
tr: cf, $r += $s;---$r:rui64mli;$s:rui64mli;cf:rboolmli;

inst: $r += $s + carry
in: int64 r, int64 s
tr: $r += $s + cf; ---$r:rui64mli;$s:rui64mli;cf:rboolmli;

inst: *(uint64 *)($s + $n) = $r
in: int64 s, ii n, int64 r
tr: $s[$p0] = $r;---$s:rui64pmli;$r:rui64mli---let $p0=$n/sizeof(uint64)
#tr: *(uint64_t *)($s + $n) = $r;---$s:rvp;$r:rui64mli

inst: $r &= $s
in: int64 r, int64 s
tr: $r &= $s;---$r:rui64mli;$s:rui64mli;

inst: $r += $s
in: int64 r, int64 s
tr: $r += $s;---$r:rui64mli;$s:rui64mli;

inst: $r += $s
in: int64 r, stack64 s
tr: $r += $s;---$r:rui64mli;$s:ui64mli;

inst: $r -= $n
in: int64 r, ii n
tr: $r -= $n;---$r:rui64mli

inst: $r -= $s
in: int64 r, int64 s
tr: $r -= $s;---$r:rui64mli;$s:rui64mli;

inst: $r -= $s
in: int64 r, stack64 s
tr: $r -= $s;---$r:rui64mli;$s:ui64mli;

inst: $r = -$s
in: int64 r, int64 s
tr: $r = -$s;---$r:rui64mli;$s:rui64mli;

inst: $r = $s * $n
in: int64 r, int64 s, ii n
tr: $r = $s * $n;---$r:rui64mli;$s:rui64mli;

inst: (uint64) $r >>= $n
in: int64 r, ii n
tr: $r >>= $n;---$r:rui64mli;

inst: $r <<= $n
in: int64 r, ii n
tr: $r <<= $n;---$r:rui64mli;

inst: $r *= $n
in: int64 r, ii n
tr: $r *= $n;---$r:rui64mli


################################################################################
# begin overide : check me
inst: =? $r - $s
in: int64 r, int64 s
  #tr: eqf = cmp_eq($r, $s);---$r:rui64mli;$s:rui64mli;eqf:rboolmli;
  #tr: eqf = ($r == $s);---$r:rui64mli;$s:rui64mli;eqf:rboolmli;
tr: /*=? $r - $s*/---$r:rui64mli;$s:rui64mli;
ps: test;=;$r;$s;

inst: =? $r - $n
in: int64 r, ii n
  #tr: eqf = cmp_eq($r, $n);---$r:rui64mli;eqf:rboolmli;
  #tr: eqf = ($r == $n);---$r:rui64mli;eqf:rboolmli;
tr: /*=? $r - $n*/---$r:rui64mli;
ps: test;=;$r;$n;

inst: $r = $s if !=
in: int64 r, int64 s
  #tr: $r = $s if !eqf;---$r:rui64mli;$s:rui64mli;eqf:rboolmli;
tr: $r = $s if ($w $cnd $z);/*$r = $s if !=*/---$r:rui64mli;$s:rui64mli;
ps: attr;($r = $s);!=

inst: $r = $s if =
in: int64 r, int64 s
  #tr: $r = $s if eqf;---$r:rui64mli;$s:rui64mli;eqf:rboolmli;
tr: $r = $s if ($w $cnd $z);/*$r = $s if =*/---$r:rui64mli;$s:rui64mli;
ps: attr;($r = $s);=


inst: signed<? $r - $s
in: int64 r, int64 s
  #tr: slf = cmp_signed_less($r, $s);---$r:rui64mli;$s:rui64mli;slf:rboolmli;
  #tr: slf = ($r <s $s);---$r:rui64mli;$s:rui64mli;slf:rboolmli;
tr: /* signed<? $r - $s */---$r:rui64mli;$s:rui64mli;
ps: test;signed<;$r;$s;

inst: $r = $s if signed<
in: int64 r, int64 s
tr: $r = $s if ($w $cnd $z); /*$r = $s if signed<*/---$r:rui64mli;$s:rui64mli;
ps: attr;($r = $s);signed<

# end overide : check me
################################################################################


inst: $r = $s if $t
in: int64 r, int64 s, flg t
tr: if($w $cnd $z){$r=$s;}---$r:rui64mli;$s:rui64mli
ps: attr;($r = $s);$t

inst: goto $f if $t
in: it f, flg t
tr: if($w $cnd $z){goto $f;}
ps: gotoif;$f;$t

inst: $c? $r -= $n
in: tflg c, int64 r, ii n
tr: //$c? $r-=$n;---$r:rui64mli
ps: test;$c;($r-=$n);0

inst: $c? $r -= $s
in: tflg c, int64 r, int64 s
tr: //$c? $r-$s;---$r:rui64mli;$s:rui64mli
ps: test;$c;$r;$s

inst: $c? $r - $s
in: tflg c, int64 r, int64 s
tr: //$c? $r-$s---$r:rui64mli;$s:rui64mli
ps: test;$c;$r;$s

inst: $c? $r - $n
in: tflg c, int64 r, ii n
tr: //$c? $r-$n---$r:rui64mli
ps: test;$c;$r;$n

inst: goto $f if $t
in: it f, flg t
tr: if($w $cnd $z){goto $f;}
ps: gotoif;$f;$t

inst: goto $f
in: it f
tr: goto $f;
ps: goto;$f

inst: $f:
in: it f
tr: $f:
ps: label;$f
